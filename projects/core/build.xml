<?xml version="1.0"?>
<project name="caaers-core" default="compile" basedir=".">
    <property name="src-dir.main"      value="src/main/java" />
    <property name="src-dir.unit-test" value="src/test/java" />
    
    <property name="build-dir.main"      value="build/main/classes"/>
    <property name="build-dir.unit-test" value="build/test/classes"/>
  
    <property name="jar-name.main" value="${basedir}/../../caaers-core.jar"/>
    <property name="jar-name.unit-test" value="${basedir}/../../caaers-core-testing.jar"/>
    <property name="dbunit-dtd-filename" value="build/dbunit-caaers.dtd"/>

    <!-- CLASSPATHS -->
    
    <path id="cp.compiled-source">
        <pathelement location="${build-dir.main}"/>
    </path>

    <path id="cp.jdbc">
        <fileset dir="db/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="cp.csm">
        <fileset dir="tools/csm/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="cp.main">
        <path refid="cp.compiled-source"/>
        <path refid="cp.csm"/>
        <fileset dir="lib/main">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="cp.unit-test">
        <path refid="cp.main"/>
        <path refid="cp.jdbc"/>
        <pathelement location="${build-dir.unit-test}"/>
        <fileset dir="lib/test">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="cp.bering">
        <path refid="cp.jdbc"/>
        <fileset dir="tools/bering">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- BASE TARGETS -->

    <target name="default-properties">
        <property name="test.failfast" value="false"/>
        <property name="config.database" value="caaers"/>
    </target>

    <target name="init" depends="default-properties">
        <mkdir dir="${build-dir.main}"/>
        <mkdir dir="${build-dir.unit-test}"/>

        <property name="config.database.file" value="db/${config.database}.properties"/>
        <fail message="Database not configured (could not read ${config.database.file}.).  See db/readme.txt.">
            <condition>
                <not><available file="${config.database.file}"/></not>
            </condition>
        </fail>
        <property file="${config.database.file}"/>
        <echo>All database ops for this build will use ${datasource.url}</echo>
    </target>

    <!-- BUILD TARGETS -->

    <target name="clean">
        <delete dir="${build-dir.main}"/>
        <delete dir="${build-dir.unit-test}"/>
        <delete file="${jar-name.main}"/>
        <delete file="${jar-name.unit-test}"/>
    </target>

    <target name="resources" description="Copy resources into classpath" depends="init">
        <copy file="${config.database.file}" tofile="${build-dir.main}/datasource.properties" overwrite="true"/>
        <copy todir="${build-dir.main}">
            <fileset dir="${src-dir.main}">
                <include name="**/*.xml"/>
                <include name="**/*.properties"/>
                <include name="**/*.ftl"/>
            </fileset>
        </copy>
        <copy todir="${build-dir.unit-test}">
            <fileset dir="${src-dir.unit-test}">
                <include name="**/*.xml"/>
            </fileset>
        </copy>
    </target>

    <target name="compile" description="Compile all java source" depends="resources">
        <javac destdir="${build-dir.main}" classpathref="cp.main"
               debug="true" source="1.5">
            <src path="${src-dir.main}"/>
        </javac>
        <javac destdir="${build-dir.unit-test}" classpathref="cp.unit-test"
               debug="true" source="1.5">
            <src path="${src-dir.unit-test}"/>
        </javac>
    </target>

    <target name="dist" description="Create JAR for this subproject" depends="compile">
        <jar basedir="${build-dir.main}" file="${jar-name.main}"/>
        <jar basedir="${build-dir.unit-test}" file="${jar-name.unit-test}">
            <!-- only the base classes -->
            <include name="gov/nih/nci/cabig/caaers/*.class"/>
            <include name="gov/nih/nci/cabig/caaers/domain/Fixtures.class"/>
        </jar>
    </target>

    <!--  DATABASE TARGETS -->

    <target name="oracle">
        <property name="config.database" value="oracle"/>
    </target>
    <target name="postgresql">
        <property name="config.database" value="postgresql"/>
    </target>
    <target name="hsqldb">
        <property name="config.database" value="hsqldb"/>
    </target>

    <target name="migrate" description="migrate database schema" depends="init">
        <taskdef resource="edu/northwestern/bioinformatics/bering/antlib.xml" classpathref="cp.bering"/>
        <property name="migrate.version" value=""/>
        <property name="bering.dialect" value=""/>
        <migrate classpathRef="cp.bering"
                 driver="${datasource.driver}"
                 dialect="${bering.dialect}"
                 url="${datasource.url}"
                 userid="${datasource.username}"
                 password="${datasource.password}"
                 targetVersion="${migrate.version}"
            />
    </target>

    <target name="dbunit-dtd" description="Create DTD for dbunit" depends="init">
        <dbunit
            driver="${datasource.driver}"
            url="${datasource.url}"
            userid="${datasource.username}"
            password="${datasource.password}"
            >
            <classpath refid="cp.unit-test"/>
            <export
                dest="${dbunit-dtd-filename}"
                format="dtd"/>
        </dbunit>
    </target>

    <target name="create-hsqldb" description="Creates the read-only HSQLDB instance for testing">
        <property name="hsqldb-dir" value="hsqldb"/>
        <property name="hsqldb-jar" value="lib/test/caaers-hsqldb.jar"/>
        <property name="create-hsqldb.temp-url" value="jdbc:hsqldb:file:${basedir}/${hsqldb-dir}/caaers"/>
        <delete file="${hsqldb-jar}"/>
        <delete dir="${hsqldb-dir}"/>

        <propertyfile file="db/hsqldb.properties">
            <entry key="datasource.url"      value="jdbc:hsqldb:res:/${hsqldb-dir}/caaers"/>
            <entry key="datasource.username" value="sa"/>
            <entry key="datasource.password" value=""/>
            <entry key="datasource.dialect"  value="org.hibernate.dialect.HSQLDialect"/>
            <entry key="bering.dialect"      value="edu.northwestern.bioinformatics.bering.dialect.Hsqldb"/>
            <entry key="datasource.driver"   value="org.hsqldb.jdbcDriver"/>
        </propertyfile>

        <mkdir dir="${hsqldb-dir}"/>
        <ant antfile="${basedir}/build.xml">
            <property name="datasource.url" value="${create-hsqldb.temp-url}"/>
            <target name="hsqldb"/>
            <target name="migrate"/>
        </ant>

        <sql driver="org.hsqldb.jdbcDriver" url="${create-hsqldb.temp-url}"
            userid="sa" password="" classpathref="db.libs" autocommit="true">
            <!-- database must be explicitly shutdown in HSQLDB >=1.7.2, so that the lock is
                released and the tests can reopen it -->
            SHUTDOWN SCRIPT;
        </sql>

        <jar file="${hsqldb-jar}">
            <fileset dir="${basedir}">
                <include name="${hsqldb-dir}/**/*"/>
            </fileset>
        </jar>
        <delete dir="${hsqldb-dir}"/>
    </target>

    <!-- SECURITY TARGETS -->

    <path id="cp.tomcat.common">
        <fileset dir="tools/tomcat/lib/common">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="cp.tomcat.server">
        <fileset dir="tools/tomcat/lib/server">
            <include name="**/*.jar"/>
        </fileset>
    </path>


    <target name="tomcat.init" depends="init">
        <property name="tomcat.config-file" value="tools/tomcat/tomcat.properties"/>
        <fail message="Tomcat manager not configured (could not read ${tomcat.config-file}).">
            <condition>
                <not><available file="${tomcat.config-file}"/></not>
            </condition>
        </fail>
        <property file="${tomcat.config-file}"/>

        <taskdef file="tools/tomcat/tomcatTasks.properties">
            <classpath>
                <path refid="cp.tomcat.common"/>
                <path refid="cp.tomcat.server"/>
            </classpath>
        </taskdef>
    </target>

    <target name="tomcat.security" depends="tomcat.init" description="Automatically copies global (CSM/UPT) configuration files to Tomcat.">
        <fail message="Could not locate Tomcat.  Please set the catalina.home property (tools/tomcat/tomcat.properties is a good place to do this).">
            <condition>
                <not><isset property="catalina.home"/></not>
            </condition>
        </fail>
        
        <property name="catalina.home" value="PLEASE SET catalina.home EXTERNALLY"/>
        <echo>Configuring CSM and UPT for the Tomcat instance in ${catalina.home}</echo>
        <property name="tomcat.security.dir" value="${catalina.home}/conf/cabig"/>
        <property name="csm.context.name" value="caaers"/>
        <!-- default UPT dialect to same as SC's, if not already set -->
        <property name="datasource.dialect.upt" value="${datasource.dialect}"/>
        <mkdir dir="${tomcat.security.dir}"/>
        <copy todir="${tomcat.security.dir}" overwrite="true">
            <filterset>
                <filtersfile file="${config.database.file}"/>
                <filter token="tomcat.security.dir" value="${tomcat.security.dir}"/>
                <filter token="datasource.dialect.upt" value="${datasource.dialect.upt}"/>
                <filter token="csm.context.name" value="caaers"/>
            </filterset>
            <fileset dir="tools/csm/conf">
                <include name="ApplicationSecurityConfig.xml"/>
                <include name="hibernate.cfg.xml"/>
                <include name="csm_jaas.config"/>
            </fileset>
        </copy>
        
        <copy file="${tomcat.security.dir}/hibernate.cfg.xml" tofile="${tomcat.security.dir}/${csm.context.name}.hibernate.cfg.xml" />
        <delete file="${tomcat.security.dir}/hibernate.cfg.xml" />

        <echo taskname="todo">
===== MANUAL STEPS =====
========================
The automatic portion of the security setup is complete.  If you have not
done so already, please perform the following manual actions.

* In ${catalina.home}/conf/catalina.properties, add two lines:
  gov.nih.nci.security.c onfigFile=${tomcat.security.dir}/ApplicationSecurityConfig.xml
  java.security.auth.login.config=${tomcat.security.dir}/csm_jaas.config

* Execute ${basedir}/conf/upt/uptdata_caaers.sql
  against your target database (${datasource.url}).
========= END ==========
===== MANUAL STEPS =====</echo>
    </target>

    <!-- TEST TARGETS -->

    <target name="test.unit.select-all">
        <property name="unit-test.pattern" value="**/*Test.java"/>
    </target>

    <target name="test.unit.select-database">
        <property name="unit-test.pattern" value="**/dao/**/*Test.java"/>
    </target>

    <target name="test" description="Run unit tests" depends="compile, test.unit.select-all">
        <echo>Executing unit tests: ${unit-test.pattern}</echo>

        <mkdir dir="${build-dir.unit-test}/junit"/>
        <junit printsummary="yes" haltonfailure="${test.failfast}" failureproperty="test.unit.failed" fork="true" forkmode="once" dir="${basedir}">
            <classpath>
                <path refid="cp.unit-test"/>
            </classpath>
            <jvmarg value="-Djava.awt.headless=true"/>
            <formatter type="plain" usefile="false"/>
            <formatter type="xml" usefile="true"/>
            <batchtest todir="${build-dir.unit-test}/junit">
                <fileset dir="${src-dir.unit-test}">
                    <include name="${unit-test.pattern}"/>
                </fileset>
            </batchtest>
        </junit>

        <fail if="test.unit.failed">One or more unit tests failed.  See above or set test.failfast=true.</fail>

    </target>

	<target name="test.unit.report">
	            <!-- junitreport -->
	            <junitreport todir="${build-dir.unit-test}/junit">
	                <fileset dir="${build-dir.unit-test}/junit">
	                    <include name="TEST-*.xml"/>
	                </fileset>
	                <report format="frames" todir="${build-dir.unit-test}/junit/summary"/>
	                <report format="noframes" todir="${build-dir.unit-test}/junit/summary"/>
	            </junitreport>

	            <!-- junitdocreport -->
	            <taskdef name="junitDocReport" classname="edu.duke.cabig.catrip.test.report.ant.JUnitDocReport">
	                 <classpath>
	                    <path refid="cp.unit-test"/>
	                </classpath>
	            </taskdef>

	            <junitDocReport format="html" useTestType="true" destfile="${build-dir.unit-test}/junit/summary/junitDocReport.html">
	                <junitResults>
	                    <fileset dir="${build-dir.unit-test}/junit">
	                        <include name="*.xml"/>
	                    </fileset>
	                </junitResults>
	                <junitDocs>
	                    <fileset dir="${src-dir.unit-test}">
	                        <include name="${unit-test.pattern}"/>
	                    </fileset>
	                </junitDocs>
	            </junitDocReport>
	</target>

    <target name="reports" depends="test.unit.report"/>


</project>

