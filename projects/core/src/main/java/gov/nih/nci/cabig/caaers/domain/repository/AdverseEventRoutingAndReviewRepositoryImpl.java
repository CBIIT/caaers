package gov.nih.nci.cabig.caaers.domain.repository;

import gov.nih.nci.cabig.caaers.dao.AdverseEventReportingPeriodDao;
import gov.nih.nci.cabig.caaers.dao.query.AdverseEventReportingPeriodForReviewQuery;
import gov.nih.nci.cabig.caaers.dao.report.ReportDao;
import gov.nih.nci.cabig.caaers.domain.AdverseEventReportingPeriod;
import gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport;
import gov.nih.nci.cabig.caaers.domain.Participant;
import gov.nih.nci.cabig.caaers.domain.ReviewStatus;
import gov.nih.nci.cabig.caaers.domain.Study;
import gov.nih.nci.cabig.caaers.domain.StudySite;
import gov.nih.nci.cabig.caaers.domain.dto.AdverseEventReportDTO;
import gov.nih.nci.cabig.caaers.domain.dto.AdverseEventReportingPeriodDTO;
import gov.nih.nci.cabig.caaers.domain.factory.AERoutingAndReviewDTOFactory;
import gov.nih.nci.cabig.caaers.domain.report.Report;
import gov.nih.nci.cabig.caaers.domain.workflow.ReportReviewComment;
import gov.nih.nci.cabig.caaers.domain.workflow.ReportingPeriodReviewComment;
import gov.nih.nci.cabig.caaers.domain.workflow.ReviewComment;
import gov.nih.nci.cabig.caaers.domain.workflow.WorkflowAware;
import gov.nih.nci.cabig.caaers.service.workflow.WorkflowService;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.jbpm.graph.def.Transition;

public class AdverseEventRoutingAndReviewRepositoryImpl implements AdverseEventRoutingAndReviewRepository {
	
	private AERoutingAndReviewDTOFactory routingAndReviewFactory;
	private AdverseEventReportingPeriodDao adverseEventReportingPeriodDao;
	private ReportDao reportDao;
	
	private WorkflowService workflowService;
	
	public List<? extends ReviewComment> fetchReviewCommentsForReport(Integer reportId) {
		return reportDao.getById(reportId).getReviewComments();
	}
	
	public List<? extends ReviewComment> fetchReviewCommentsForReportingPeriod(Integer rpId) {
		return adverseEventReportingPeriodDao.getById(rpId).getReviewComments();
	}
	
	public void addReportReviewComment(Integer reportId, String comment, String userId){
		Report report = reportDao.getById(reportId);
		ReportReviewComment reviewComment = new ReportReviewComment();
		reviewComment.setUserComment(comment);
		reviewComment.setCreatedDate(new Date());
		reviewComment.setAutoGeneratedText("Added by " + userId);
		report.getReviewComments().add(reviewComment);
		
		reportDao.save(report);
	}
	public void addReportingPeriodReviewComment(Integer reportingPeriodId, String comment, String userId){
		AdverseEventReportingPeriod rp = adverseEventReportingPeriodDao.getById(reportingPeriodId);
		ReportingPeriodReviewComment reviewComment = new ReportingPeriodReviewComment();
		reviewComment.setUserComment(comment);
		reviewComment.setCreatedDate(new Date());
		reviewComment.setAutoGeneratedText("Added by " + userId);
		
		rp.getReviewComments().add(reviewComment);
		adverseEventReportingPeriodDao.save(rp);
	}
	
	public List<String> advanceReportingPeriodWorkflow(Integer workflowId, String toTransition, Integer id) {
		ReviewStatus nextStatus = workflowService.advanceWorkflow(workflowId, toTransition);
		AdverseEventReportingPeriod reportingPeriod = adverseEventReportingPeriodDao.getById(id);
		reportingPeriod.setReviewStatus(nextStatus);
		adverseEventReportingPeriodDao.save(reportingPeriod);
		return workflowService.nextTransitionNames(workflowId);
	}
	
	public List<String> advanceReportWorkflow(Integer workflowId,String toTransition, Integer id) {
		ReviewStatus nextStatus = workflowService.advanceWorkflow(workflowId, toTransition);
		Report report = reportDao.getById(id);
		report.setReviewStatus(nextStatus);
		reportDao.save(report);
		return workflowService.nextTransitionNames(workflowId);
	}
	public List<AdverseEventReportingPeriodDTO> findAdverseEventReportingPeriods(Participant participant, Study study, StudySite studySite, ReviewStatus reviewStatus){
		AdverseEventReportingPeriodForReviewQuery query = new AdverseEventReportingPeriodForReviewQuery();
		
		if(participant != null){
			query.filterByParticipant(participant.getId());
		}
		
		if(study != null){
			query.filterByStudy(study.getId());
		}
		
		if(studySite != null){
			query.filterByStudySite(studySite.getId());
		}
		
		List<AdverseEventReportingPeriod> reportingPeriods = adverseEventReportingPeriodDao.findAdverseEventReportingPeriods(query);
		
		
		List<AdverseEventReportingPeriodDTO> reportingPeriodDtos = new ArrayList<AdverseEventReportingPeriodDTO>();
		for(AdverseEventReportingPeriod reportingPeriod : reportingPeriods){
			if(reportingPeriod.getWorkflowId() != null && isReportingPeriodHavingSpecifiedReviewStatus(reportingPeriod, reviewStatus)){
				AdverseEventReportingPeriodDTO rpDto = routingAndReviewFactory.createAdverseEventEvalutionPeriodDTO(reportingPeriod);
				reportingPeriodDtos.add(rpDto);	
				
				//check the Reports
				if(reportingPeriod.getAeReports() != null){
					for(ExpeditedAdverseEventReport aeReport : reportingPeriod.getAeReports()){
						
						if(aeReport.getReports() != null){
							for(Report report : aeReport.getReports()){
								if(report.getWorkflowId() != null && isEntityHavingSpecifiedReviewStatus(reviewStatus, report)){
									AdverseEventReportDTO rDto = routingAndReviewFactory.createAdverseEventReportDTO(report, aeReport);
									rpDto.addAdverseEventReportDTO(rDto);
								}
								
								
							}//report
						}
					}//aereport
				}
				
			}
			
		}
		
		return reportingPeriodDtos;
		
	}
	/**
	 * Will return true, if the entity has the specified review status. 
	 * @param rp - An {@link AdverseEventReportingPeriod}
	 * @param rs - A {@link ReviewStatus}
	 * @return - true if the reporting period of any of the {@link Report} is of the specified review status
	 */
	protected boolean isReportingPeriodHavingSpecifiedReviewStatus(AdverseEventReportingPeriod rp, ReviewStatus rs){
		if(rs == null) return true; //if reviewstatus is null, then return true
		if(rp.getReviewStatus() == null) return false; //not enabled workflow for this reporting period
		if(rp.getReviewStatus().equals(rs)) return true;
		if(rp.getAeReports() != null){
			for(ExpeditedAdverseEventReport aeReport : rp.getAeReports()){
				if(aeReport.getReports() != null){
					for(Report r : aeReport.getReports()){
						if(r.getReviewStatus() == null) continue; //skip, as not enabled under workflow
						if(r.getReviewStatus().equals(rs)) return true;
					}
				}
			}
		}
		return false; //nor reporting period or report(s) has the status mentioned
	}
	
	/**
	 * Will return true, if the entity has the given workflow status
	 * @param rs
	 * @param wfAwareEntity
	 * @return
	 */
	protected boolean isEntityHavingSpecifiedReviewStatus( ReviewStatus rs,WorkflowAware wfAwareEntity){
		if(rs == null) return true; //return true if review status is null
		ReviewStatus entityRS = wfAwareEntity.getReviewStatus();
		if(entityRS == null) return false; //not participating in workflow
		return entityRS.equals(rs);
	}
	
	public void setRoutingAndReviewFactory(
			AERoutingAndReviewDTOFactory routingAndReviewFactory) {
		this.routingAndReviewFactory = routingAndReviewFactory;
	}
	
	public AERoutingAndReviewDTOFactory getRoutingAndReviewFactory() {
		return routingAndReviewFactory;
	}
	
	public void setAdverseEventReportingPeriodDao(
			AdverseEventReportingPeriodDao adverseEventReportingPeriodDao) {
		this.adverseEventReportingPeriodDao = adverseEventReportingPeriodDao;
	}
	public AdverseEventReportingPeriodDao getAdverseEventReportingPeriodDao() {
		return adverseEventReportingPeriodDao;
	}
	
	public ReportDao getReportDao() {
		return reportDao;
	}
	public void setReportDao(ReportDao reportDao) {
		this.reportDao = reportDao;
	}
	
	public WorkflowService getWorkflowService() {
		return workflowService;
	}
	public void setWorkflowService(WorkflowService workflowService) {
		this.workflowService = workflowService;
	}
}
