package gov.nih.nci.cabig.caaers.resolver;import gov.nih.nci.cabig.caaers.domain.Organization;import gov.nih.nci.cabig.caaers.domain.RemoteOrganization;import gov.nih.nci.coppa.iso.Ad;import gov.nih.nci.coppa.iso.AddressPartType;import gov.nih.nci.coppa.iso.Adxp;import gov.nih.nci.coppa.iso.Enxp;import gov.nih.nci.coppa.iso.Ii;import gov.nih.nci.services.correlation.IdentifiedOrganizationCorrelationServiceRemote;import gov.nih.nci.services.correlation.IdentifiedOrganizationDTO;import gov.nih.nci.services.organization.OrganizationDTO;import gov.nih.nci.services.organization.OrganizationEntityServiceRemote;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import org.apache.log4j.Logger;import com.semanticbits.coppa.infrastructure.service.RemoteResolver;import com.semanticbits.coppasimulator.service.OrganizationService;public class OrganizationResolver implements RemoteResolver{ 	private static Logger logger = Logger.getLogger(OrganizationResolver.class);	private OrganizationService organizationService;	private OrganizationEntityServiceRemote organizationEntityServiceRemote;	private IdentifiedOrganizationCorrelationServiceRemote identifiedOrganizationCorrelationServiceRemote;		public Organization populateRemoteOrganization(OrganizationDTO organizationDto){		IdentifiedOrganizationDTO identifiedOrganizationDTO = null;		try {			identifiedOrganizationDTO = identifiedOrganizationCorrelationServiceRemote.getCorrelation(organizationDto.getIdentifier());		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		Organization remoteOrganization = new RemoteOrganization();		Iterator<Enxp> enxpItr = organizationDto.getName().getPart().iterator();		Enxp next = enxpItr.next();		List<Adxp> postalAddress = organizationDto.getPostalAddress().getPart();		Iterator<Adxp> adxpItr = postalAddress.iterator();		String city = "";		String country = "";		while(adxpItr.hasNext()){			Adxp adXp = adxpItr.next();			if(AddressPartType.CTY.equals(adXp.getType())){				city = adXp.getValue();			}			if(AddressPartType.CNT.equals(adXp.getType())){				country = adXp.getCode();			}		}		remoteOrganization.setName(next.getValue().toString());		remoteOrganization.setCity(city);		remoteOrganization.setCountry(country);			remoteOrganization.setNciInstituteCode(identifiedOrganizationDTO.getAssignedId().getExtension());			remoteOrganization.setExternalId(organizationDto.getIdentifier().getExtension());		return remoteOrganization;	}		public Object getRemoteEntityByUniqueId(String externalId) {		OrganizationDTO organizationDto = null;		Ii ii = new Ii();		ii.setExtension(externalId);		try {			organizationDto = organizationEntityServiceRemote.getOrganization(ii);		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		return populateRemoteOrganization(organizationDto);	}		@SuppressWarnings("unchecked")	public List<Object> find(Object example) {			Organization remoteOrgExample = (RemoteOrganization)example;//		 build Organization DTO based on remoteOrgExample		OrganizationDTO dtoExample = new OrganizationDTO();		List<OrganizationDTO> organizationDTOs = organizationEntityServiceRemote.search(dtoExample);						//List<OrganizationDTO> organizationDTOs = organizationService.search(dtoExample);		List<Object> remoteOrganizations = new ArrayList<Object>();		for (OrganizationDTO organizationDTO:organizationDTOs) {			Organization remoteOrganization = populateRemoteOrganization(organizationDTO);			remoteOrganizations.add(remoteOrganization);		}		return remoteOrganizations;	}	public void setOrganizationService(OrganizationService organizationService) {		this.organizationService = organizationService;	}	public void setIdentifiedOrganizationCorrelationServiceRemote(			IdentifiedOrganizationCorrelationServiceRemote identifiedOrganizationCorrelationServiceRemote) {		this.identifiedOrganizationCorrelationServiceRemote = identifiedOrganizationCorrelationServiceRemote;	}	public void setOrganizationEntityServiceRemote(			OrganizationEntityServiceRemote organizationEntityServiceRemote) {		this.organizationEntityServiceRemote = organizationEntityServiceRemote;	}}