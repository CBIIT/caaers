package gov.nih.nci.cabig.caaers.dao;

import static gov.nih.nci.cabig.caaers.CaaersUseCase.MAPPING_VOCAB;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.springframework.core.io.ClassPathResource;
import org.springframework.jdbc.core.JdbcTemplate;

import gov.nih.nci.cabig.caaers.CaaersDbNoSecurityTestCase;
import gov.nih.nci.cabig.caaers.CaaersUseCases;
import gov.nih.nci.cabig.caaers.domain.MeddraVersion;

/**
 * @author Krikor Krumlian
 * @author Rhett Sutphin
 */
@CaaersUseCases( { MAPPING_VOCAB })
public class MedDRADaoTest extends CaaersDbNoSecurityTestCase {
	
	private JdbcTemplate jdbcTemplate;
	private Properties properties;
	private MedDRADao meddraDao;
	private MeddraVersionDao meddraVersionDao; 
	private static final String MEDDRA_SOC_TABLE = "meddra_soc";
    private static final String MEDDRA_HLGT_TABLE = "meddra_hlgt";
    private static final String MEDDRA_HLT_TABLE = "meddra_hlt";
    private static final String MEDDRA_PT_TABLE = "meddra_pt";
	
	@Override
    protected void setUp() throws Exception {
		super.setUp();
		jdbcTemplate = (JdbcTemplate) getApplicationContext().getBean("jdbcTemplate");
		meddraDao = (MedDRADao) getApplicationContext().getBean("medDRADao");
		meddraVersionDao = (MeddraVersionDao) getApplicationContext().getBean("meddraVersionDao");
		properties = new Properties();
		properties.put("databaseName", "postgres");
	}
	
	public void testCreateMeddraVersion() throws Exception{
		String meddra_name = "TestMeddra";
		meddraDao.createMeddraVersion(meddra_name);
		interruptSession();
		
		List<MeddraVersion> mvList = meddraVersionDao.getMeddraByName("TestMeddra");
		assertNotNull("Meddra Version not created by createMeddraVersion method",mvList);
		assertEquals("Duplicate meddra versions created", 1, mvList.size());
	}
	
	public List<String[]> getFileContents(String conceptName) throws Exception{
		List<String[]> termLists = new ArrayList<String[]>();
		File testFile = new ClassPathResource("/gov/nih/nci/cabig/caaers/dao/meddra/" + conceptName + ".asc").getFile();
		BufferedReader input = null;
        // use buffering, reading one line at a time
        // FileReader always assumes default encoding is OK!
        input = new BufferedReader(new FileReader(testFile));
        String line;

        while ((line = input.readLine()) != null) {
            // al.add(line.split("\\$"));
            if (line.length() > 0) termLists.add(line.split("\\$"));
        }
		return termLists;
	}
	
	public void testInsertSOCxHLGT() throws Exception{
		Integer vId = getMeddraVersionId("TestMeddra");
		
		//Load the SOC table
		List<String[]> termsList = getFileContents("soc");
		meddraDao.insertSystemOrganClasses(termsList, 0, vId);
		Map<String,Integer> socCodeToIdMap = meddraDao.populateCodeToIdMap(MEDDRA_SOC_TABLE, vId);
		assertNotNull("populateCodeToIdMap() method failed to generate the map", socCodeToIdMap);
		assertEquals("Incorrect number of key-value pairs generated by populateCodeToIdMap method", 1, socCodeToIdMap.keySet().size());
		
		//Load the HLGT table
		termsList = getFileContents("hlgt");
		meddraDao.insertHighLevelGroupTerms(termsList, 0, vId);
		Map<String,Integer> hlgtCodeToIdMap = meddraDao.populateCodeToIdMap(MEDDRA_HLGT_TABLE, vId);
		assertNotNull("populateCodeToIdMap() method failed to generate the map", hlgtCodeToIdMap);
		assertEquals("Incorrect number of key-value pairs generated by populateCodeToIdMap method", 1, hlgtCodeToIdMap.keySet().size());
		
		//Load soc_hlgt
		termsList = getFileContents("soc_hlgt");
		meddraDao.insertSOCxHLGT(termsList, 0, vId, socCodeToIdMap, hlgtCodeToIdMap);
	}
	
	public void testInsertHLGTxHLT() throws Exception{
		Integer vId = getMeddraVersionId("TestMeddra");
		
		//Load the HLGT table
		List<String[]> termsList = getFileContents("hlgt");
		meddraDao.insertHighLevelGroupTerms(termsList, 0, vId);
		Map<String,Integer> hlgtCodeToIdMap = meddraDao.populateCodeToIdMap(MEDDRA_HLGT_TABLE, vId);
		assertNotNull("populateCodeToIdMap() method failed to generate the map", hlgtCodeToIdMap);
		assertEquals("Incorrect number of key-value pairs generated by populateCodeToIdMap method", 1, hlgtCodeToIdMap.keySet().size());
		
		//Load the HLT table
		termsList = getFileContents("hlt");
		meddraDao.insertHighLevelTerms(termsList, 0, vId);
		Map<String,Integer> hltCodeToIdMap = meddraDao.populateCodeToIdMap(MEDDRA_HLT_TABLE, vId);
		assertNotNull("populateCodeToIdMap() method failed to generate the map", hltCodeToIdMap);
		assertEquals("Incorrect number of key-value pairs generated by populateCodeToIdMap method", 1, hltCodeToIdMap.keySet().size());
		
		//Load hlgt_hlt
		termsList = getFileContents("hlgt_hlt");
		meddraDao.insertHLGTxHLT(termsList, 0, vId, hlgtCodeToIdMap, hltCodeToIdMap);
	}
	
	public void testInsertHLTxPTTerms() throws Exception{
		Integer vId = getMeddraVersionId("TestMeddra");
		
		//Load the SOC table
		List<String[]> termsList = getFileContents("soc");
		meddraDao.insertSystemOrganClasses(termsList, 0, vId);
		Map<String,Integer> socCodeToIdMap = meddraDao.populateCodeToIdMap(MEDDRA_SOC_TABLE, vId);
		assertNotNull("populateCodeToIdMap() method failed to generate the map", socCodeToIdMap);
		assertEquals("Incorrect number of key-value pairs generated by populateCodeToIdMap method", 1, socCodeToIdMap.keySet().size());
		
		//Load the HLT table
		termsList = getFileContents("hlt");
		meddraDao.insertHighLevelTerms(termsList, 0, vId);
		Map<String,Integer> hltCodeToIdMap = meddraDao.populateCodeToIdMap(MEDDRA_HLT_TABLE, vId);
		assertNotNull("populateCodeToIdMap() method failed to generate the map", hltCodeToIdMap);
		assertEquals("Incorrect number of key-value pairs generated by populateCodeToIdMap method", 1, hltCodeToIdMap.keySet().size());

		//Load the PT table
		termsList = getFileContents("pt");
		meddraDao.insertPreferredTerms(termsList, 0, vId, socCodeToIdMap);
		Map<String,Integer> ptCodeToIdMap = meddraDao.populateCodeToIdMap(MEDDRA_PT_TABLE, vId);
		
		//Load the HLTxPT table
		termsList = getFileContents("hlt_pt");
		meddraDao.insertHLTxPT(termsList, 0, vId, hltCodeToIdMap, ptCodeToIdMap);
	}
	
	public void testInsertLowLevelTerms() throws Exception{
		Integer vId = getMeddraVersionId("TestMeddra");
		
		//Load the SOC table
		List<String[]> termsList = getFileContents("soc");
		meddraDao.insertSystemOrganClasses(termsList, 0, vId);
		Map<String,Integer> socCodeToIdMap = meddraDao.populateCodeToIdMap(MEDDRA_SOC_TABLE, vId);
		assertNotNull("populateCodeToIdMap() method failed to generate the map", socCodeToIdMap);
		assertEquals("Incorrect number of key-value pairs generated by populateCodeToIdMap method", 1, socCodeToIdMap.keySet().size());
		
		//Load the PT table
		termsList = getFileContents("pt");
		meddraDao.insertPreferredTerms(termsList, 0, vId, socCodeToIdMap);
		Map<String,Integer> ptCodeToIdMap = meddraDao.populateCodeToIdMap(MEDDRA_PT_TABLE, vId);
		assertNotNull("populateCodeToIdMap() method failed to generate the map", ptCodeToIdMap);
		assertEquals("Incorrect number of key-value pairs generated by populateCodeToIdMap method", 1, ptCodeToIdMap.keySet().size());
		
		termsList = getFileContents("llt");
		meddraDao.insertLowLevelTerms(termsList, 0, vId, ptCodeToIdMap);
	}
	
	public void testDeleteMeddraConcepts() throws Exception{
		Integer vId = getMeddraVersionId("TestMeddra");
		
		//Load the SOC table
		List<String[]> termsList = getFileContents("soc");
		meddraDao.insertSystemOrganClasses(termsList, 0, vId);
		
		//Delete the table
		meddraDao.deleteMeddraConcepts(vId);
		Map<String,Integer> socCodeToIdMap = meddraDao.populateCodeToIdMap(MEDDRA_SOC_TABLE, vId);
		assertEquals("SOC table not deleted properly", 0, socCodeToIdMap.keySet().size());
		
		List<MeddraVersion> mvList = meddraVersionDao.getMeddraByName("TestMeddra");
		assertEquals("Meddra Version not deleted correctly by deleteMeddraConcepts method", 0, mvList.size());
	}
	
	public Integer getMeddraVersionId(String meddraName){
		//First create the meddraVersin
		meddraDao.createMeddraVersion("TestMeddra");
		List<MeddraVersion> mvList = meddraVersionDao.getMeddraByName("TestMeddra");

		return ((MeddraVersion)mvList.get(0)).getId();
	}
}
