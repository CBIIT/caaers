<?xml version="1.0" encoding="UTF-8"?>
<package  name="gov.nih.nci.cabig.caaers.rules.reporting_labs_section"  xmlns="http://drools.org/drools-3.0" xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:schemaLocation="http://drools.org/drools-3.0 drools-3.0.xsd">

	<import name="gov.nih.nci.cabig.caaers.domain.*"/>
	<import name="gov.nih.nci.cabig.caaers.validation.*" />
	<import name="java.util.HashSet" />
	<import name="gov.nih.nci.cabig.caaers.rules.objectgraph.NullSafeFieldExtractor" />
	<import name="gov.nih.nci.cabig.caaers.rules.common.NumberUtil" />
	<import name="gov.nih.nci.cabig.caaers.rules.runtime.ExpeditedAdverseEventValidator" />
	<import name="gov.nih.nci.cabig.caaers.rules.common.DateUtil" />
	
	<global type="gov.nih.nci.cabig.caaers.rules.runtime.RuleContext" identifier="ruleContext"/>
	<global type="gov.nih.nci.cabig.caaers.rules.runtime.action.ActionDispatcher" identifier="actionDispatcher"/>
	
	<!-- ==========================================================================
	RuleName : LAB_BR1_CHK
	Logic :'Lab Category' and 'Lab' must not be provided if 'Other Lab'  is provided and vice versa
	Error Code : LAB_BR1_ERR
	Error Message : Either and only LAB_CATEGORY and LAB_NAME or OTHER_LAB must be provided.
	============================================================================= -->
	<rule name="LAB_BR1_CHK">
		<lhs>
			<column identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
			<column identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
			<eval>new ExpeditedAdverseEventValidator() {
				public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
					int i = 0;
					for(Lab l : aeReport.getLabs()){
						i++;
						if(l.getName() != null &amp;&amp; l.getOther() != null){
							errors.addValidationError("LAB_BR1_ERR", "'Lab test name' must not be provided if 'Other'  is provided and vice versa", i);
						}
					}
					return errors.hasErrors() ? FAIL : SUCCESS;
				}
	    	}.validate(aeReport, errors)</eval>
		</lhs>
		<rhs>
			<!-- Already Populated Error Message-->
       	</rhs>
	</rule>
	
	<!-- ==========================================================================
	RuleName : LAB_BR3_CHK
	Logic :"“Nadir/Worst Date” must not be greater “Baseline Date”."
	Error Code : LAB_BR3_ERR
	Error Message : WORST_DATE must not be greater BASELINE_DATE
	============================================================================= -->
	<rule name="LAB_BR3_CHK">
		<lhs>
			<column identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
			<column identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
			<eval>new ExpeditedAdverseEventValidator() {
				public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
					int i = 0;
					for(Lab l : aeReport.getLabs()){
						i++;
						if(l.getBaseline().getDate() == null  || l.getNadir().getDate() == null) continue;
					
						if(DateUtil.compare(l.getNadir().getDate(),l.getBaseline().getDate() ) &lt; 0){
							errors.addValidationError("LAB_BR3_ERR", "'Worst value(Date)' must not be greater 'Baseline value(Date)'.", i);
						}
					}
					return errors.hasErrors() ? FAIL : SUCCESS;
				}
	    	}.validate(aeReport, errors)</eval>
		</lhs>
		<rhs>
			<!-- Already Populated Error Message-->
       	</rhs>
	</rule>
	
	<!-- ==========================================================================
	RuleName : LAB_BR4_CHK
	Logic :"“Recovery Date” must not be greater than “Nadir/Worst Date”.
	Error Code : LAB_BR4_ERR
	Error Message : RECOVERY_LAST_DATE must not be greater than WORST_DATE
	============================================================================= -->
	<rule name="LAB_BR4_CHK">
		<lhs>
			<column identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
			<column identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
			<eval>new ExpeditedAdverseEventValidator() {
				public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
					int i = 0;
					for(Lab l : aeReport.getLabs()){
						i++;
						if(l.getRecovery().getDate() == null  || l.getNadir().getDate() == null) continue;
					
						if(DateUtil.compare(l.getRecovery().getDate(),l.getNadir().getDate() ) &lt; 0){
							errors.addValidationError("LAB_BR4_ERR", "'Recovery value(Date)' must not be greater 'Worst value(Date)'.", i);
						}
					}
					return errors.hasErrors() ? FAIL : SUCCESS;
				}
	    	}.validate(aeReport, errors)</eval>
		</lhs>
		<rhs>
			<!-- Already Populated Error Message-->
       	</rhs>
	</rule>
	
	<!-- ==========================================================================
	RuleName : LAB_UK_CHK
	Logic :Lab Results must be unique
	Error Code : LAB_UK_ERR
	Error Message :Lab Results must be unique
	============================================================================= -->
	<rule name="LAB_UK_CHK">
		<lhs>
			<column identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
			<column identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
			<eval>new ExpeditedAdverseEventValidator() {
				public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
					int i = 0;
					HashSet hSet = new HashSet();
					for(Lab l : aeReport.getLabs()){
						i++;
						if(!hSet.add(l)){
							errors.addValidationError("LAB_UK_ERR","Lab Results must be unique", i, ( (l.getOther() == null)? l.getName():l.getOther()) );
						}
					}
					return errors.hasErrors() ? FAIL : SUCCESS;
				}
	    	}.validate(aeReport, errors)</eval>
		</lhs>
		<rhs>
			<!-- Already Populated Error Message-->
       	</rhs>
	</rule>
	</package>
