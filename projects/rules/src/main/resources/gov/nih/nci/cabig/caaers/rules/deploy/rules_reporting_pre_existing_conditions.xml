<?xml version="1.0" encoding="UTF-8"?>
<package  name="gov.nih.nci.cabig.caaers.rules.reporting_pre_existing_condition_section"  xmlns="http://drools.org/drools-4.0" xmlns:drools="http://drools.org/drools-4.0" xmlns:rules="http://drools.org/drools-4.0" 
	xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:schemaLocation="http://drools.org/drools-4.0 drools-4.0.xsd">

	<import name="gov.nih.nci.cabig.caaers.domain.*"/>
	<import name="gov.nih.nci.cabig.caaers.validation.*" />
	<import name="java.util.List" />
	<import name="gov.nih.nci.cabig.caaers.rules.objectgraph.NullSafeFieldExtractor" />
	<import name="gov.nih.nci.cabig.caaers.rules.common.NumberUtil" />
	<import name="gov.nih.nci.cabig.caaers.rules.runtime.ExpeditedAdverseEventValidator" />
	<import name="gov.nih.nci.cabig.caaers.rules.common.DateUtil" />
	
	<global type="gov.nih.nci.cabig.caaers.rules.runtime.RuleContext" identifier="ruleContext"/>
	<global type="gov.nih.nci.cabig.caaers.rules.runtime.action.ActionDispatcher" identifier="actionDispatcher"/>
	
	<!-- ==========================================================================
	RuleName : PEC_BR1_CHK
	Logic : 'Pre-Existing Condition'  must not be provided if 'Other Pre-Existing Condition' is provided and vice-versa
	Error Code : PEC_BR1_ERR
	Error Message : Either and only CONDITION_NAME or OTHER_CONDITION_NAME must be provided
	============================================================================= -->
	<rule name="PEC_BR1_CHK">
		<lhs>
			<pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
			<pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
			<eval>new ExpeditedAdverseEventValidator() {
					public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
						int i = 0;
						for(SAEReportPreExistingCondition pc : aeReport.getSaeReportPreExistingConditions()){
							i++;
							if(pc.getOther() != null &amp;&amp; pc.getPreExistingCondition() != null){
								errors.addValidationError("PEC_BR1_ERR", "Either and only 'Pre-existing condition' or 'Other(pre-existing)' must be provided", i);
							}
						}
						return errors.hasErrors() ? FAIL : SUCCESS;
					}
	    		 }.validate(aeReport, errors)</eval>
		</lhs>
		<rhs>
			<!-- Already Populated Error Message-->
       	</rhs>
	</rule>
	</package>