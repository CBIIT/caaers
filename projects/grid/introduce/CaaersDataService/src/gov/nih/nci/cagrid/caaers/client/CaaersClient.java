package gov.nih.nci.cagrid.caaers.client;import gov.nih.nci.cagrid.caaers.common.CaaersI;import gov.nih.nci.cagrid.caaers.stubs.CaaersPortType;import gov.nih.nci.cagrid.caaers.stubs.service.CaaersServiceAddressingLocator;import gov.nih.nci.cagrid.cqlquery.CQLQuery;import gov.nih.nci.cagrid.cqlquery.Object;import gov.nih.nci.cagrid.cqlresultset.CQLQueryResults;import gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator;import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;import java.io.File;import java.io.FileInputStream;import java.io.InputStream;import java.rmi.RemoteException;import javax.xml.namespace.QName;import org.apache.axis.EngineConfiguration;import org.apache.axis.client.AxisClient;import org.apache.axis.client.Stub;import org.apache.axis.configuration.FileProvider;import org.apache.axis.message.addressing.EndpointReferenceType;import org.apache.axis.types.URI.MalformedURIException;import org.apache.axis.utils.ClassUtils;import org.globus.gsi.GlobusCredential;import org.globus.wsrf.encoding.ObjectDeserializer;import org.oasis.wsrf.properties.GetResourcePropertyResponse;import org.xml.sax.InputSource;/** * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE METHODS. * * This client is generated automatically by Introduce to provide a clean unwrapped API to the * service. * * On construction the class instance will contact the remote service and retrieve it's security * metadata description which it will use to configure the Stub specifically for each method call. *  * @created by Introduce Toolkit version 1.0 */public class CaaersClient extends ServiceSecurityClient implements CaaersI {		protected CaaersPortType portType;	private Object portTypeMutex;	public CaaersClient(String url) throws MalformedURIException, RemoteException {		this(url,null);		}	public CaaersClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {	   	super(url,proxy);	   	initialize();	}		public CaaersClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {	   	this(epr,null);	}		public CaaersClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {	   	super(epr,proxy);		initialize();	}		private void initialize() throws RemoteException {	    this.portTypeMutex = new Object();		this.portType = createPortType();	}	private CaaersPortType createPortType() throws RemoteException {		CaaersServiceAddressingLocator locator = new CaaersServiceAddressingLocator();		// attempt to load our context sensitive wsdd file		InputStream resourceAsStream = ClassUtils.getResourceAsStream(getClass(), "client-config.wsdd");		if (resourceAsStream != null) {			// we found it, so tell axis to configure an engine to use it			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);			// set the engine of the locator			locator.setEngine(new AxisClient(engineConfig));		}		CaaersPortType port = null;		try {			port = locator.getCaaersPortTypePort(getEndpointReference());		} catch (Exception e) {			throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);		}		return port;	}		public GetResourcePropertyResponse getResourceProperty(QName resourcePropertyQName) throws RemoteException {		return portType.getResourceProperty(resourcePropertyQName);	}	public static void usage(){		System.out.println(CaaersClient.class.getName() + " -url <service url>");	}		public static void main(String [] args){		System.out.println("Running the Grid Service Client");		try{ 			CaaersClient client = new CaaersClient("http://10.10.10.2:18030/wsrf/services/cagrid/Caaers");            java.lang.Object qryObj = ObjectDeserializer.deserialize(new InputSource(new FileInputStream("src/gov/nih/nci/cagrid/caaers/client/testcql.xml")),CQLQuery.class);			CQLQuery cqlQuery = (CQLQuery)qryObj;            CQLQueryResults results = client.query(cqlQuery);			CQLQueryResultsIterator iter = new CQLQueryResultsIterator(results, new FileInputStream(new File("src/gov/nih/nci/cagrid/caaers/client/client-config.wsdd")));			System.out.println(" ");			System.out.println(" - - - - Results - - - ");			System.out.println(" ");				           while (iter.hasNext()) {	        	   gov.nih.nci.cabig.caaers.domain.Study obj = (gov.nih.nci.cabig.caaers.domain.Study) iter.next();				   System.out.println(obj.getShortTitle() + " | " + obj.getLongTitle() + " | " + obj.getPhaseCode() + " | " + obj.getStatus());				//   System.out.println( "Version is " + obj.getExpected() );	           }	           		} catch (Exception e) {			e.printStackTrace();			System.exit(1);		}	}	public gov.nih.nci.cagrid.metadata.security.ServiceSecurityMetadata getServiceSecurityMetadata() throws RemoteException {      synchronized(portTypeMutex){        configureStubSecurity((Stub)portType,"getServiceSecurityMetadata");        gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest params = new gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest();        gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataResponse boxedResult = portType.getServiceSecurityMetadata(params);        return boxedResult.getServiceSecurityMetadata();      }    }	public gov.nih.nci.cagrid.cqlresultset.CQLQueryResults query(gov.nih.nci.cagrid.cqlquery.CQLQuery cqlQuery) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {      synchronized(portTypeMutex){        configureStubSecurity((Stub)portType,"query");        gov.nih.nci.cagrid.data.QueryRequest params = new gov.nih.nci.cagrid.data.QueryRequest();        gov.nih.nci.cagrid.data.QueryRequestCqlQuery cqlQueryContainer = new gov.nih.nci.cagrid.data.QueryRequestCqlQuery();        cqlQueryContainer.setCQLQuery(cqlQuery);        params.setCqlQuery(cqlQueryContainer);        gov.nih.nci.cagrid.data.QueryResponse boxedResult = portType.query(params);        return boxedResult.getCQLQueryResultCollection();      }    }}