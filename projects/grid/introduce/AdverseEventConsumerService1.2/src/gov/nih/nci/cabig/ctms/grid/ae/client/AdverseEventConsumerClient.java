package gov.nih.nci.cabig.ctms.grid.ae.client;

import gov.nih.nci.cabig.ctms.grid.ae.common.AdverseEventConsumerI;
import gov.nih.nci.cagrid.common.Utils;
import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.globus.gsi.GlobusCredential;

import java.io.FileReader;
import java.io.InputStream;
import java.rmi.RemoteException;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 * <p/>
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 * <p/>
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 *
 * @created by Introduce Toolkit version 1.2
 */
public class AdverseEventConsumerClient extends AdverseEventConsumerClientBase implements AdverseEventConsumerI {

    public AdverseEventConsumerClient(String url) throws MalformedURIException, RemoteException {
        this(url, null);
    }

    public AdverseEventConsumerClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(url, proxy);
    }

    public AdverseEventConsumerClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
        this(epr, null);
    }

    public AdverseEventConsumerClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(epr, proxy);
    }

    public static void usage() {
        System.out.println(AdverseEventConsumerClient.class.getName() + " -url <service url>");
    }

    private aenotification.AENotificationType getAe(final String aeFile) throws Exception {
        FileReader reader = new FileReader(aeFile);
        InputStream is = getClass().getResourceAsStream("client-config.wsdd");
        aenotification.AENotificationType ae = (aenotification.AENotificationType) Utils.deserializeObject(reader, aenotification.AENotificationType.class, is);

        return ae;
    }

    public static void main(String[] args) {
        System.out.println("Running the Grid Service Client");

        try {
            if (!(args.length < 2)) {
                if (args[0].equals("-url")) {
                    AdverseEventConsumerClient client = new AdverseEventConsumerClient(args[1]);

                    aenotification.AENotificationType notificationType = client.getAe(
                            "/Users/saurabhagrawal/projects/latest/psc-2.1/grid/adverse-event-consumer/test/resources/SampleAdverseEventMessage.xml");
                    client.register(notificationType);

                } else {
                    usage();
                    System.exit(1);
                }
            } else {
                usage();
                System.exit(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "getMultipleResourceProperties");
            return portType.getMultipleResourceProperties(params);
        }
    }

    public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "getResourceProperty");
            return portType.getResourceProperty(params);
        }
    }

    public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "queryResourceProperties");
            return portType.queryResourceProperties(params);
        }
    }

    public void register(aenotification.AENotificationType aeNotification) throws RemoteException, gov.nih.nci.cabig.ctms.grid.ae.stubs.types.InvalidRegistration, gov.nih.nci.cabig.ctms.grid.ae.stubs.types.RegistrationFailed {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "register");
            gov.nih.nci.cabig.ctms.grid.ae.stubs.RegisterRequest params = new gov.nih.nci.cabig.ctms.grid.ae.stubs.RegisterRequest();
            gov.nih.nci.cabig.ctms.grid.ae.stubs.RegisterRequestAeNotification aeNotificationContainer = new gov.nih.nci.cabig.ctms.grid.ae.stubs.RegisterRequestAeNotification();
            aeNotificationContainer.setAeNotification(aeNotification);
            params.setAeNotification(aeNotificationContainer);
            gov.nih.nci.cabig.ctms.grid.ae.stubs.RegisterResponse boxedResult = portType.register(params);
        }
    }

}
