package gov.nih.nci.cabig.ctms.grid.ae.client;

import java.io.FileInputStream;
import java.io.FileReader;
import java.io.InputStream;
import java.io.Reader;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.axis.utils.ClassUtils;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.cabig.ctms.grid.ae.stubs.AdverseEventConsumerPortType;
import gov.nih.nci.cabig.ctms.grid.ae.stubs.service.AdverseEventConsumerServiceAddressingLocator;
import gov.nih.nci.cabig.ctms.grid.ae.beans.AENotificationType;
import gov.nih.nci.cabig.ctms.grid.ae.common.AdverseEventConsumerI;
import gov.nih.nci.cagrid.common.Utils;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.0
 */
public class AdverseEventConsumerClient extends ServiceSecurityClient implements AdverseEventConsumerI {	
	protected AdverseEventConsumerPortType portType;
	private Object portTypeMutex;

	public AdverseEventConsumerClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public AdverseEventConsumerClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	   	initialize();
	}
	
	public AdverseEventConsumerClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public AdverseEventConsumerClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
		initialize();
	}
	
	private void initialize() throws RemoteException {
	    this.portTypeMutex = new Object();
		this.portType = createPortType();
	}

	private AdverseEventConsumerPortType createPortType() throws RemoteException {

		AdverseEventConsumerServiceAddressingLocator locator = new AdverseEventConsumerServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = ClassUtils.getResourceAsStream(getClass(), "client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		AdverseEventConsumerPortType port = null;
		try {
			port = locator.getAdverseEventConsumerPortTypePort(getEndpointReference());
		} catch (Exception e) {
			throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
		}

		return port;
	}
	
	public GetResourcePropertyResponse getResourceProperty(QName resourcePropertyQName) throws RemoteException {
		return portType.getResourceProperty(resourcePropertyQName);
	}

	public static void usage(){
		System.out.println(AdverseEventConsumerClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
                String proxyFile = "proxy.txt";
                String clientConfigFile = "src/gov/nih/nci/cabig/ctms/grid/ae/client/client-config.wsdd";
                String aeFile = "test/resources/SampleAdverseEventMessage.xml";
                AENotificationType ae = getNotification(clientConfigFile, aeFile);
                GlobusCredential cred = new GlobusCredential(new FileInputStream(proxyFile));
			  AdverseEventConsumerClient client = new AdverseEventConsumerClient(args[1], cred);
			  client.register(ae);
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}
    
    public static AENotificationType getNotification(String clientConfigFile, String aeFile) {
        AENotificationType ae = null;
        try {
            InputStream config = new FileInputStream(clientConfigFile);
            Reader reader = new FileReader(aeFile);
            ae = (AENotificationType) Utils.deserializeObject(reader, AENotificationType.class,
                            config);
        } catch (Exception ex) {
            throw new RuntimeException("Error deserializing sample adverse event: " + ex.getMessage(), ex);
        }
        return ae;
    }

	public gov.nih.nci.cagrid.metadata.security.ServiceSecurityMetadata getServiceSecurityMetadata() throws RemoteException {
      synchronized(portTypeMutex){
        configureStubSecurity((Stub)portType,"getServiceSecurityMetadata");
        gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest params = new gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest();
        gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataResponse boxedResult = portType.getServiceSecurityMetadata(params);
        return boxedResult.getServiceSecurityMetadata();
      }
    }
	public void register(gov.nih.nci.cabig.ctms.grid.ae.beans.AENotificationType aeNotification) throws RemoteException, gov.nih.nci.cabig.ctms.grid.ae.stubs.types.InvalidRegistration, gov.nih.nci.cabig.ctms.grid.ae.stubs.types.RegistrationFailed {
      synchronized(portTypeMutex){
        configureStubSecurity((Stub)portType,"register");
        gov.nih.nci.cabig.ctms.grid.ae.stubs.RegisterRequest params = new gov.nih.nci.cabig.ctms.grid.ae.stubs.RegisterRequest();
        gov.nih.nci.cabig.ctms.grid.ae.stubs.RegisterRequestAeNotification aeNotificationContainer = new gov.nih.nci.cabig.ctms.grid.ae.stubs.RegisterRequestAeNotification();
        aeNotificationContainer.setAeNotification(aeNotification);
        params.setAeNotification(aeNotificationContainer);
        gov.nih.nci.cabig.ctms.grid.ae.stubs.RegisterResponse boxedResult = portType.register(params);
      }
    }

}
