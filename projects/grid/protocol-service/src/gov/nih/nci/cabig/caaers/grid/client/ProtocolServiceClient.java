package gov.nih.nci.cabig.caaers.grid.client;

import java.io.FileInputStream;
import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.axis.utils.ClassUtils;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.cabig.caaers.grid.stubs.ProtocolServicePortType;
import gov.nih.nci.cabig.caaers.grid.stubs.service.ProtocolServiceAddressingLocator;
import gov.nih.nci.cabig.caaers.grid.beans.IdentifierType;
import gov.nih.nci.cabig.caaers.grid.beans.RegistrationType;
import gov.nih.nci.cabig.caaers.grid.common.ProtocolServiceI;
import gov.nih.nci.cagrid.common.Utils;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE METHODS.
 * 
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 * 
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.0
 */
public class ProtocolServiceClient extends ServiceSecurityClient implements ProtocolServiceI {
    protected ProtocolServicePortType portType;

    private Object portTypeMutex;

    public ProtocolServiceClient(String url) throws MalformedURIException, RemoteException {
        this(url, null);
    }

    public ProtocolServiceClient(String url, GlobusCredential proxy) throws MalformedURIException,
                    RemoteException {
        super(url, proxy);
        initialize();
    }

    public ProtocolServiceClient(EndpointReferenceType epr) throws MalformedURIException,
                    RemoteException {
        this(epr, null);
    }

    public ProtocolServiceClient(EndpointReferenceType epr, GlobusCredential proxy)
                    throws MalformedURIException, RemoteException {
        super(epr, proxy);
        initialize();
    }

    private void initialize() throws RemoteException {
        this.portTypeMutex = new Object();
        this.portType = createPortType();
    }

    private ProtocolServicePortType createPortType() throws RemoteException {

        ProtocolServiceAddressingLocator locator = new ProtocolServiceAddressingLocator();
        // attempt to load our context sensitive wsdd file
        InputStream resourceAsStream = ClassUtils.getResourceAsStream(getClass(),
                        "client-config.wsdd");
        if (resourceAsStream != null) {
            // we found it, so tell axis to configure an engine to use it
            EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
            // set the engine of the locator
            locator.setEngine(new AxisClient(engineConfig));
        }
        ProtocolServicePortType port = null;
        try {
            port = locator.getProtocolServicePortTypePort(getEndpointReference());
        } catch (Exception e) {
            throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
        }

        return port;
    }

    public GetResourcePropertyResponse getResourceProperty(QName resourcePropertyQName)
                    throws RemoteException {
        return portType.getResourceProperty(resourcePropertyQName);
    }

    public static void main(String[] args) {

        try {
            String url = args[0];
            String proxyFile = args[1];
            String regFile = args[2];

            RegistrationType reg = (RegistrationType) Utils.deserializeDocument(regFile,
                            RegistrationType.class);

            GlobusCredential cred = new GlobusCredential(new FileInputStream(proxyFile));
            ProtocolServiceClient client = new ProtocolServiceClient(url, cred);

            IdentifierType ident = client.registerParticipant(reg);

            System.out.println(ident.getValue());

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

	public gov.nih.nci.cagrid.metadata.security.ServiceSecurityMetadata getServiceSecurityMetadata() throws RemoteException {
      synchronized(portTypeMutex){
        configureStubSecurity((Stub)portType,"getServiceSecurityMetadata");
        gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest params = new gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest();
        gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataResponse boxedResult = portType.getServiceSecurityMetadata(params);
        return boxedResult.getServiceSecurityMetadata();
      }
    }
	public gov.nih.nci.cabig.caaers.grid.beans.IdentifierType registerParticipant(gov.nih.nci.cabig.caaers.grid.beans.RegistrationType registration) throws RemoteException, gov.nih.nci.cabig.caaers.grid.stubs.types.InvalidRegistration, gov.nih.nci.cabig.caaers.grid.stubs.types.RegistrationError {
      synchronized(portTypeMutex){
        configureStubSecurity((Stub)portType,"registerParticipant");
        gov.nih.nci.cabig.caaers.grid.stubs.RegisterParticipantRequest params = new gov.nih.nci.cabig.caaers.grid.stubs.RegisterParticipantRequest();
        gov.nih.nci.cabig.caaers.grid.stubs.RegisterParticipantRequestRegistration registrationContainer = new gov.nih.nci.cabig.caaers.grid.stubs.RegisterParticipantRequestRegistration();
        registrationContainer.setRegistration(registration);
        params.setRegistration(registrationContainer);
        gov.nih.nci.cabig.caaers.grid.stubs.RegisterParticipantResponse boxedResult = portType.registerParticipant(params);
        return boxedResult.getIdentifier();
      }
    }

}
