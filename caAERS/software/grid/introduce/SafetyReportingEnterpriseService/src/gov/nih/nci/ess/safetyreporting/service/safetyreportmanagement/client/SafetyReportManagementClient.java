package gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.SafetyReportManagementPortType;
import gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.service.SafetyReportManagementServiceAddressingLocator;
import gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.common.SafetyReportManagementI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.4
 */
public class SafetyReportManagementClient extends SafetyReportManagementClientBase implements SafetyReportManagementI {	

	public SafetyReportManagementClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public SafetyReportManagementClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public SafetyReportManagementClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public SafetyReportManagementClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(SafetyReportManagementClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  SafetyReportManagementClient client = new SafetyReportManagementClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.oasis.wsrf.lifetime.DestroyResponse destroy(org.oasis.wsrf.lifetime.Destroy params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"destroy");
    return portType.destroy(params);
    }
  }

  public org.oasis.wsrf.lifetime.SetTerminationTimeResponse setTerminationTime(org.oasis.wsrf.lifetime.SetTerminationTime params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"setTerminationTime");
    return portType.setTerminationTime(params);
    }
  }

  public gov.nih.nci.ess.safetyreporting.types.SafetyReportVersion initiateSafetyReport(ess.caaers.nci.nih.gov.Id studyIdentifier,ess.caaers.nci.nih.gov.Id subjectIdentifier,ess.caaers.nci.nih.gov.Id patientIdentifier,_21090.org.iso.DSET_II adverseEventIdentifiers,_21090.org.iso.DSET_II problemIdentifiers,gov.nih.nci.ess.safetyreporting.types.AdverseEventReportingPeriod adverseEventReportingPeriod) throws RemoteException, gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.types.SafetyReportingServiceException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"initiateSafetyReport");
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.InitiateSafetyReportRequest params = new gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.InitiateSafetyReportRequest();
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.InitiateSafetyReportRequestStudyIdentifier studyIdentifierContainer = new gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.InitiateSafetyReportRequestStudyIdentifier();
    studyIdentifierContainer.setId(studyIdentifier);
    params.setStudyIdentifier(studyIdentifierContainer);
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.InitiateSafetyReportRequestSubjectIdentifier subjectIdentifierContainer = new gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.InitiateSafetyReportRequestSubjectIdentifier();
    subjectIdentifierContainer.setId(subjectIdentifier);
    params.setSubjectIdentifier(subjectIdentifierContainer);
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.InitiateSafetyReportRequestPatientIdentifier patientIdentifierContainer = new gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.InitiateSafetyReportRequestPatientIdentifier();
    patientIdentifierContainer.setId(patientIdentifier);
    params.setPatientIdentifier(patientIdentifierContainer);
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.InitiateSafetyReportRequestAdverseEventIdentifiers adverseEventIdentifiersContainer = new gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.InitiateSafetyReportRequestAdverseEventIdentifiers();
    adverseEventIdentifiersContainer.setDSET_II(adverseEventIdentifiers);
    params.setAdverseEventIdentifiers(adverseEventIdentifiersContainer);
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.InitiateSafetyReportRequestProblemIdentifiers problemIdentifiersContainer = new gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.InitiateSafetyReportRequestProblemIdentifiers();
    problemIdentifiersContainer.setDSET_II(problemIdentifiers);
    params.setProblemIdentifiers(problemIdentifiersContainer);
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.InitiateSafetyReportRequestAdverseEventReportingPeriod adverseEventReportingPeriodContainer = new gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.InitiateSafetyReportRequestAdverseEventReportingPeriod();
    adverseEventReportingPeriodContainer.setAdverseEventReportingPeriod(adverseEventReportingPeriod);
    params.setAdverseEventReportingPeriod(adverseEventReportingPeriodContainer);
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.InitiateSafetyReportResponse boxedResult = portType.initiateSafetyReport(params);
    return boxedResult.getSafetyReportVersion();
    }
  }

  public gov.nih.nci.ess.safetyreporting.types.SafetyReportVersion associateAdverseEventsToSafetyReport(_21090.org.iso.DSET_II adverseEventIdentifiers,ess.caaers.nci.nih.gov.Id safetyReportIdentifier) throws RemoteException, gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.types.SafetyReportingServiceException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"associateAdverseEventsToSafetyReport");
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.AssociateAdverseEventsToSafetyReportRequest params = new gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.AssociateAdverseEventsToSafetyReportRequest();
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.AssociateAdverseEventsToSafetyReportRequestAdverseEventIdentifiers adverseEventIdentifiersContainer = new gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.AssociateAdverseEventsToSafetyReportRequestAdverseEventIdentifiers();
    adverseEventIdentifiersContainer.setDSET_II(adverseEventIdentifiers);
    params.setAdverseEventIdentifiers(adverseEventIdentifiersContainer);
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.AssociateAdverseEventsToSafetyReportRequestSafetyReportIdentifier safetyReportIdentifierContainer = new gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.AssociateAdverseEventsToSafetyReportRequestSafetyReportIdentifier();
    safetyReportIdentifierContainer.setId(safetyReportIdentifier);
    params.setSafetyReportIdentifier(safetyReportIdentifierContainer);
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.AssociateAdverseEventsToSafetyReportResponse boxedResult = portType.associateAdverseEventsToSafetyReport(params);
    return boxedResult.getSafetyReportVersion();
    }
  }

  public void associateProblemToSafetyReport() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"associateProblemToSafetyReport");
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.AssociateProblemToSafetyReportRequest params = new gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.AssociateProblemToSafetyReportRequest();
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.AssociateProblemToSafetyReportResponse boxedResult = portType.associateProblemToSafetyReport(params);
    }
  }

  public gov.nih.nci.ess.safetyreporting.types.SafetyReportVersion dissociateAdverseEventsFromSafetyReport(ess.caaers.nci.nih.gov.Id safetyReportIdentifier,_21090.org.iso.DSET_II adverseEventIdentifiers) throws RemoteException, gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.types.SafetyReportingServiceException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"dissociateAdverseEventsFromSafetyReport");
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.DissociateAdverseEventsFromSafetyReportRequest params = new gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.DissociateAdverseEventsFromSafetyReportRequest();
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.DissociateAdverseEventsFromSafetyReportRequestSafetyReportIdentifier safetyReportIdentifierContainer = new gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.DissociateAdverseEventsFromSafetyReportRequestSafetyReportIdentifier();
    safetyReportIdentifierContainer.setId(safetyReportIdentifier);
    params.setSafetyReportIdentifier(safetyReportIdentifierContainer);
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.DissociateAdverseEventsFromSafetyReportRequestAdverseEventIdentifiers adverseEventIdentifiersContainer = new gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.DissociateAdverseEventsFromSafetyReportRequestAdverseEventIdentifiers();
    adverseEventIdentifiersContainer.setDSET_II(adverseEventIdentifiers);
    params.setAdverseEventIdentifiers(adverseEventIdentifiersContainer);
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.DissociateAdverseEventsFromSafetyReportResponse boxedResult = portType.dissociateAdverseEventsFromSafetyReport(params);
    return boxedResult.getSafetyReportVersion();
    }
  }

  public void dissociateProblemFromSafetyReport() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"dissociateProblemFromSafetyReport");
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.DissociateProblemFromSafetyReportRequest params = new gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.DissociateProblemFromSafetyReportRequest();
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.DissociateProblemFromSafetyReportResponse boxedResult = portType.dissociateProblemFromSafetyReport(params);
    }
  }

  public gov.nih.nci.ess.safetyreporting.types.SafetyReportVersion updateAdverseEventInformationInSafetyReport(ess.caaers.nci.nih.gov.Id safetyReportIdentifier,ess.caaers.nci.nih.gov.AdverseEvent adverseEvent) throws RemoteException, gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.types.SafetyReportingServiceException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"updateAdverseEventInformationInSafetyReport");
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.UpdateAdverseEventInformationInSafetyReportRequest params = new gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.UpdateAdverseEventInformationInSafetyReportRequest();
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.UpdateAdverseEventInformationInSafetyReportRequestSafetyReportIdentifier safetyReportIdentifierContainer = new gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.UpdateAdverseEventInformationInSafetyReportRequestSafetyReportIdentifier();
    safetyReportIdentifierContainer.setId(safetyReportIdentifier);
    params.setSafetyReportIdentifier(safetyReportIdentifierContainer);
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.UpdateAdverseEventInformationInSafetyReportRequestAdverseEvent adverseEventContainer = new gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.UpdateAdverseEventInformationInSafetyReportRequestAdverseEvent();
    adverseEventContainer.setAdverseEvent(adverseEvent);
    params.setAdverseEvent(adverseEventContainer);
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.UpdateAdverseEventInformationInSafetyReportResponse boxedResult = portType.updateAdverseEventInformationInSafetyReport(params);
    return boxedResult.getSafetyReportVersion();
    }
  }

  public void updateProblemInformationInSafetyReport() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"updateProblemInformationInSafetyReport");
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.UpdateProblemInformationInSafetyReportRequest params = new gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.UpdateProblemInformationInSafetyReportRequest();
    gov.nih.nci.ess.safetyreporting.service.safetyreportmanagement.stubs.UpdateProblemInformationInSafetyReportResponse boxedResult = portType.updateProblemInformationInSafetyReport(params);
    }
  }

}
