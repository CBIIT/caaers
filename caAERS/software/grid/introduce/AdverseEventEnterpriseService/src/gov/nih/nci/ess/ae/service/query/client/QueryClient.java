package gov.nih.nci.ess.ae.service.query.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.ess.ae.service.query.stubs.QueryPortType;
import gov.nih.nci.ess.ae.service.query.stubs.service.QueryServiceAddressingLocator;
import gov.nih.nci.ess.ae.service.query.common.QueryI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class QueryClient extends QueryClientBase implements QueryI {	

	public QueryClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public QueryClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public QueryClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public QueryClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(QueryClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  QueryClient client = new QueryClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public ess.caaers.nci.nih.gov.DSET_AdverseEvent findAdverseEvents(ess.caaers.nci.nih.gov.AdverseEvent adverseEvent) throws RemoteException, gov.nih.nci.ess.ae.service.management.stubs.types.AdverseEventServiceException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"findAdverseEvents");
    gov.nih.nci.ess.ae.service.query.stubs.FindAdverseEventsRequest params = new gov.nih.nci.ess.ae.service.query.stubs.FindAdverseEventsRequest();
    gov.nih.nci.ess.ae.service.query.stubs.FindAdverseEventsRequestAdverseEvent adverseEventContainer = new gov.nih.nci.ess.ae.service.query.stubs.FindAdverseEventsRequestAdverseEvent();
    adverseEventContainer.setAdverseEvent(adverseEvent);
    params.setAdverseEvent(adverseEventContainer);
    gov.nih.nci.ess.ae.service.query.stubs.FindAdverseEventsResponse boxedResult = portType.findAdverseEvents(params);
    return boxedResult.getDSET_AdverseEvent();
    }
  }

  public ess.caaers.nci.nih.gov.AdverseEvent getAdverseEventData(ess.caaers.nci.nih.gov.Id adverseEventIdentifier) throws RemoteException, gov.nih.nci.ess.ae.service.management.stubs.types.AdverseEventServiceException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getAdverseEventData");
    gov.nih.nci.ess.ae.service.query.stubs.GetAdverseEventDataRequest params = new gov.nih.nci.ess.ae.service.query.stubs.GetAdverseEventDataRequest();
    gov.nih.nci.ess.ae.service.query.stubs.GetAdverseEventDataRequestAdverseEventIdentifier adverseEventIdentifierContainer = new gov.nih.nci.ess.ae.service.query.stubs.GetAdverseEventDataRequestAdverseEventIdentifier();
    adverseEventIdentifierContainer.setId(adverseEventIdentifier);
    params.setAdverseEventIdentifier(adverseEventIdentifierContainer);
    gov.nih.nci.ess.ae.service.query.stubs.GetAdverseEventDataResponse boxedResult = portType.getAdverseEventData(params);
    return boxedResult.getAdverseEvent();
    }
  }

}
