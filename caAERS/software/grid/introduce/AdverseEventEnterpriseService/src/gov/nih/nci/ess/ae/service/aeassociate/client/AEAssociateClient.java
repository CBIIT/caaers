package gov.nih.nci.ess.ae.service.aeassociate.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.ess.ae.service.aeassociate.stubs.AEAssociatePortType;
import gov.nih.nci.ess.ae.service.aeassociate.stubs.service.AEAssociateServiceAddressingLocator;
import gov.nih.nci.ess.ae.service.aeassociate.common.AEAssociateI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class AEAssociateClient extends AEAssociateClientBase implements AEAssociateI {	

	public AEAssociateClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public AEAssociateClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public AEAssociateClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public AEAssociateClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(AEAssociateClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  AEAssociateClient client = new AEAssociateClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public void associateAdverseEventToStudy(ess.caaers.nci.nih.gov.Id adverseEventIdentifier,ess.caaers.nci.nih.gov.Id studyIdentifier) throws RemoteException, gov.nih.nci.ess.ae.service.management.stubs.types.AdverseEventServiceException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"associateAdverseEventToStudy");
    gov.nih.nci.ess.ae.service.aeassociate.stubs.AssociateAdverseEventToStudyRequest params = new gov.nih.nci.ess.ae.service.aeassociate.stubs.AssociateAdverseEventToStudyRequest();
    gov.nih.nci.ess.ae.service.aeassociate.stubs.AssociateAdverseEventToStudyRequestAdverseEventIdentifier adverseEventIdentifierContainer = new gov.nih.nci.ess.ae.service.aeassociate.stubs.AssociateAdverseEventToStudyRequestAdverseEventIdentifier();
    adverseEventIdentifierContainer.setId(adverseEventIdentifier);
    params.setAdverseEventIdentifier(adverseEventIdentifierContainer);
    gov.nih.nci.ess.ae.service.aeassociate.stubs.AssociateAdverseEventToStudyRequestStudyIdentifier studyIdentifierContainer = new gov.nih.nci.ess.ae.service.aeassociate.stubs.AssociateAdverseEventToStudyRequestStudyIdentifier();
    studyIdentifierContainer.setId(studyIdentifier);
    params.setStudyIdentifier(studyIdentifierContainer);
    gov.nih.nci.ess.ae.service.aeassociate.stubs.AssociateAdverseEventToStudyResponse boxedResult = portType.associateAdverseEventToStudy(params);
    }
  }

  public void dissociateAdverseEventFromStudy(ess.caaers.nci.nih.gov.Id adverseEventIdentifier,ess.caaers.nci.nih.gov.Id studyIdentifier) throws RemoteException, gov.nih.nci.ess.ae.service.management.stubs.types.AdverseEventServiceException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"dissociateAdverseEventFromStudy");
    gov.nih.nci.ess.ae.service.aeassociate.stubs.DissociateAdverseEventFromStudyRequest params = new gov.nih.nci.ess.ae.service.aeassociate.stubs.DissociateAdverseEventFromStudyRequest();
    gov.nih.nci.ess.ae.service.aeassociate.stubs.DissociateAdverseEventFromStudyRequestAdverseEventIdentifier adverseEventIdentifierContainer = new gov.nih.nci.ess.ae.service.aeassociate.stubs.DissociateAdverseEventFromStudyRequestAdverseEventIdentifier();
    adverseEventIdentifierContainer.setId(adverseEventIdentifier);
    params.setAdverseEventIdentifier(adverseEventIdentifierContainer);
    gov.nih.nci.ess.ae.service.aeassociate.stubs.DissociateAdverseEventFromStudyRequestStudyIdentifier studyIdentifierContainer = new gov.nih.nci.ess.ae.service.aeassociate.stubs.DissociateAdverseEventFromStudyRequestStudyIdentifier();
    studyIdentifierContainer.setId(studyIdentifier);
    params.setStudyIdentifier(studyIdentifierContainer);
    gov.nih.nci.ess.ae.service.aeassociate.stubs.DissociateAdverseEventFromStudyResponse boxedResult = portType.dissociateAdverseEventFromStudy(params);
    }
  }

  public void associateAdditionalInformationToAdverseEvent(ess.caaers.nci.nih.gov.Id adverseEventIdentifier,ess.caaers.nci.nih.gov.AdditionalInformation additionalInformation) throws RemoteException, gov.nih.nci.ess.ae.service.management.stubs.types.AdverseEventServiceException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"associateAdditionalInformationToAdverseEvent");
    gov.nih.nci.ess.ae.service.aeassociate.stubs.AssociateAdditionalInformationToAdverseEventRequest params = new gov.nih.nci.ess.ae.service.aeassociate.stubs.AssociateAdditionalInformationToAdverseEventRequest();
    gov.nih.nci.ess.ae.service.aeassociate.stubs.AssociateAdditionalInformationToAdverseEventRequestAdverseEventIdentifier adverseEventIdentifierContainer = new gov.nih.nci.ess.ae.service.aeassociate.stubs.AssociateAdditionalInformationToAdverseEventRequestAdverseEventIdentifier();
    adverseEventIdentifierContainer.setId(adverseEventIdentifier);
    params.setAdverseEventIdentifier(adverseEventIdentifierContainer);
    gov.nih.nci.ess.ae.service.aeassociate.stubs.AssociateAdditionalInformationToAdverseEventRequestAdditionalInformation additionalInformationContainer = new gov.nih.nci.ess.ae.service.aeassociate.stubs.AssociateAdditionalInformationToAdverseEventRequestAdditionalInformation();
    additionalInformationContainer.setAdditionalInformation(additionalInformation);
    params.setAdditionalInformation(additionalInformationContainer);
    gov.nih.nci.ess.ae.service.aeassociate.stubs.AssociateAdditionalInformationToAdverseEventResponse boxedResult = portType.associateAdditionalInformationToAdverseEvent(params);
    }
  }

  public void dissociateAdditionalInformationFromAdverseEvent(ess.caaers.nci.nih.gov.Id adverseEventIdentifier,ess.caaers.nci.nih.gov.AdditionalInformation additionalInformation) throws RemoteException, gov.nih.nci.ess.ae.service.management.stubs.types.AdverseEventServiceException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"dissociateAdditionalInformationFromAdverseEvent");
    gov.nih.nci.ess.ae.service.aeassociate.stubs.DissociateAdditionalInformationFromAdverseEventRequest params = new gov.nih.nci.ess.ae.service.aeassociate.stubs.DissociateAdditionalInformationFromAdverseEventRequest();
    gov.nih.nci.ess.ae.service.aeassociate.stubs.DissociateAdditionalInformationFromAdverseEventRequestAdverseEventIdentifier adverseEventIdentifierContainer = new gov.nih.nci.ess.ae.service.aeassociate.stubs.DissociateAdditionalInformationFromAdverseEventRequestAdverseEventIdentifier();
    adverseEventIdentifierContainer.setId(adverseEventIdentifier);
    params.setAdverseEventIdentifier(adverseEventIdentifierContainer);
    gov.nih.nci.ess.ae.service.aeassociate.stubs.DissociateAdditionalInformationFromAdverseEventRequestAdditionalInformation additionalInformationContainer = new gov.nih.nci.ess.ae.service.aeassociate.stubs.DissociateAdditionalInformationFromAdverseEventRequestAdditionalInformation();
    additionalInformationContainer.setAdditionalInformation(additionalInformation);
    params.setAdditionalInformation(additionalInformationContainer);
    gov.nih.nci.ess.ae.service.aeassociate.stubs.DissociateAdditionalInformationFromAdverseEventResponse boxedResult = portType.dissociateAdditionalInformationFromAdverseEvent(params);
    }
  }

  public void associateTreatmentInformationToAdverseEvent(ess.caaers.nci.nih.gov.Id adverseEventIdentifier,ess.caaers.nci.nih.gov.TreatmentInformation treatmentInformation) throws RemoteException, gov.nih.nci.ess.ae.service.management.stubs.types.AdverseEventServiceException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"associateTreatmentInformationToAdverseEvent");
    gov.nih.nci.ess.ae.service.aeassociate.stubs.AssociateTreatmentInformationToAdverseEventRequest params = new gov.nih.nci.ess.ae.service.aeassociate.stubs.AssociateTreatmentInformationToAdverseEventRequest();
    gov.nih.nci.ess.ae.service.aeassociate.stubs.AssociateTreatmentInformationToAdverseEventRequestAdverseEventIdentifier adverseEventIdentifierContainer = new gov.nih.nci.ess.ae.service.aeassociate.stubs.AssociateTreatmentInformationToAdverseEventRequestAdverseEventIdentifier();
    adverseEventIdentifierContainer.setId(adverseEventIdentifier);
    params.setAdverseEventIdentifier(adverseEventIdentifierContainer);
    gov.nih.nci.ess.ae.service.aeassociate.stubs.AssociateTreatmentInformationToAdverseEventRequestTreatmentInformation treatmentInformationContainer = new gov.nih.nci.ess.ae.service.aeassociate.stubs.AssociateTreatmentInformationToAdverseEventRequestTreatmentInformation();
    treatmentInformationContainer.setTreatmentInformation(treatmentInformation);
    params.setTreatmentInformation(treatmentInformationContainer);
    gov.nih.nci.ess.ae.service.aeassociate.stubs.AssociateTreatmentInformationToAdverseEventResponse boxedResult = portType.associateTreatmentInformationToAdverseEvent(params);
    }
  }

  public void disassociateTreatmentInformationFromAdverseEvent(ess.caaers.nci.nih.gov.Id adverseEventIdentifier,ess.caaers.nci.nih.gov.TreatmentInformation treatmentInformation) throws RemoteException, gov.nih.nci.ess.ae.service.management.stubs.types.AdverseEventServiceException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"disassociateTreatmentInformationFromAdverseEvent");
    gov.nih.nci.ess.ae.service.aeassociate.stubs.DisassociateTreatmentInformationFromAdverseEventRequest params = new gov.nih.nci.ess.ae.service.aeassociate.stubs.DisassociateTreatmentInformationFromAdverseEventRequest();
    gov.nih.nci.ess.ae.service.aeassociate.stubs.DisassociateTreatmentInformationFromAdverseEventRequestAdverseEventIdentifier adverseEventIdentifierContainer = new gov.nih.nci.ess.ae.service.aeassociate.stubs.DisassociateTreatmentInformationFromAdverseEventRequestAdverseEventIdentifier();
    adverseEventIdentifierContainer.setId(adverseEventIdentifier);
    params.setAdverseEventIdentifier(adverseEventIdentifierContainer);
    gov.nih.nci.ess.ae.service.aeassociate.stubs.DisassociateTreatmentInformationFromAdverseEventRequestTreatmentInformation treatmentInformationContainer = new gov.nih.nci.ess.ae.service.aeassociate.stubs.DisassociateTreatmentInformationFromAdverseEventRequestTreatmentInformation();
    treatmentInformationContainer.setTreatmentInformation(treatmentInformation);
    params.setTreatmentInformation(treatmentInformationContainer);
    gov.nih.nci.ess.ae.service.aeassociate.stubs.DisassociateTreatmentInformationFromAdverseEventResponse boxedResult = portType.disassociateTreatmentInformationFromAdverseEvent(params);
    }
  }

}
