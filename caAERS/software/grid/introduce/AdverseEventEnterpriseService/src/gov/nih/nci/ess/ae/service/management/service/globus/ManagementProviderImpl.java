/*******************************************************************************
 * Copyright SemanticBits, Northwestern University and Akaza Research
 * 
 * Distributed under the OSI-approved BSD 3-Clause License.
 * See http://ncip.github.com/caaers/LICENSE.txt for details.
 ******************************************************************************/
package gov.nih.nci.ess.ae.service.management.service.globus;

import gov.nih.nci.ess.ae.service.management.service.ManagementImpl;

import java.rmi.RemoteException;

/** 
 * DO NOT EDIT:  This class is autogenerated!
 *
 * This class implements each method in the portType of the service.  Each method call represented
 * in the port type will be then mapped into the unwrapped implementation which the user provides
 * in the AdverseEventEnterpriseServiceImpl class.  This class handles the boxing and unboxing of each method call
 * so that it can be correclty mapped in the unboxed interface that the developer has designed and 
 * has implemented.  Authorization callbacks are automatically made for each method based
 * on each methods authorization requirements.
 * 
 * @created by Introduce Toolkit version 1.3
 * 
 */
public class ManagementProviderImpl{
	
	ManagementImpl impl;
	
	public ManagementProviderImpl() throws RemoteException {
		impl = new ManagementImpl();
	}
	

    public gov.nih.nci.ess.ae.service.management.stubs.InitiateAdverseEventResponse initiateAdverseEvent(gov.nih.nci.ess.ae.service.management.stubs.InitiateAdverseEventRequest params) throws RemoteException, gov.nih.nci.ess.ae.service.management.stubs.types.AdverseEventServiceException {
    gov.nih.nci.ess.ae.service.management.stubs.InitiateAdverseEventResponse boxedResult = new gov.nih.nci.ess.ae.service.management.stubs.InitiateAdverseEventResponse();
    boxedResult.setAdverseEvent(impl.initiateAdverseEvent(params.getSubjectIdentifier().getId(),params.getStudyIdentifier().getId(),params.getAdverseEvent().getAdverseEvent(),params.getCourseStartDate().getTsDateTime()));
    return boxedResult;
  }

    public gov.nih.nci.ess.ae.service.management.stubs.UpdateAdverseEventResponse updateAdverseEvent(gov.nih.nci.ess.ae.service.management.stubs.UpdateAdverseEventRequest params) throws RemoteException, gov.nih.nci.ess.ae.service.management.stubs.types.AdverseEventServiceException {
    gov.nih.nci.ess.ae.service.management.stubs.UpdateAdverseEventResponse boxedResult = new gov.nih.nci.ess.ae.service.management.stubs.UpdateAdverseEventResponse();
    boxedResult.setAdverseEvent(impl.updateAdverseEvent(params.getAdverseEvent().getAdverseEvent()));
    return boxedResult;
  }

    public gov.nih.nci.ess.ae.service.management.stubs.DeactivateAdverseEventResponse deactivateAdverseEvent(gov.nih.nci.ess.ae.service.management.stubs.DeactivateAdverseEventRequest params) throws RemoteException, gov.nih.nci.ess.ae.service.management.stubs.types.AdverseEventServiceException {
    gov.nih.nci.ess.ae.service.management.stubs.DeactivateAdverseEventResponse boxedResult = new gov.nih.nci.ess.ae.service.management.stubs.DeactivateAdverseEventResponse();
    boxedResult.setAdverseEvent(impl.deactivateAdverseEvent(params.getAdverseEventIdentifier().getId()));
    return boxedResult;
  }

}
