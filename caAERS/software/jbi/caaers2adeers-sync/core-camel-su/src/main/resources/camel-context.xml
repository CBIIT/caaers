<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by Apache ServiceMix Archetype -->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:cxf="http://camel.apache.org/schema/cxf"
    xmlns:proxy="http://webservice.caaers.cabig.nci.nih.gov/GenericProcessor/"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <context:annotation-config />
    <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
    	<package>gov.nih.nci.cabig.caaers2adeers</package> 
    </camelContext>
    
    <!-- <bean class="org.apache.camel.component.cxf.transport.CamelTransportFactory">
	  <property name="bus" ref="cxf" />
	  <property name="camelContext" ref="camel" />
	  <property name="checkException" value="true" />
	  <property name="transportIds">
	    <list>
	      <value>http://cxf.apache.org/transports/camel</value>
	    </list>
	  </property>
	</bean>
	
	<cxf:cxfEndpoint id="genericProcessor" address="s[GENERIC_PROCESSOR_WS_BINDING_URL]"
					wsdlURL="classpath:GenericProcessor.wsdl"
					serviceName="proxy:GenericProcessor" 
					endpointName="proxy:GenericProcessorSOAP"
					>
		<cxf:properties>
			<entry key="dataFormat" value="MESSAGE"/>
			<entry key="synchronous" value="true"/>
		</cxf:properties>
	</cxf:cxfEndpoint> -->
	
    <bean id="messageSource"
          class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename">
            <value>classpath:caxchange.properties</value>
        </property>
    </bean>


    <!--
      This is to capture 'participantInitialization.port', specified in caxchange.properties file.
      We injected this bean in Caaers2AdeersRouteBuilder.java
    -->
    <bean id="participantInitializationPort" class="java.lang.String">
        <constructor-arg index="0" value="s[participantInitialization.port]"/>
    </bean>

    <!--
       This is to capture 'raveIntegrationServices.port', specified in caxchange.properties file.
       We injected this bean in Caaers2AdeersRouteBuilder.java
    -->
    <bean id="raveIntegrationServicesPort" class="java.lang.String">
        <constructor-arg index="0" value="s[raveIntegrationServices.port]"/>
    </bean>

    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:caxchange.properties</value>
        </property>
        <property name="placeholderPrefix"><value>s[</value></property>
        <property name="placeholderSuffix"><value>]</value></property>
        <property name="ignoreResourceNotFound"><value>true</value></property>
        <property name="ignoreUnresolvablePlaceholders"><value>true</value></property>
    </bean>


    <!-- https://github.com/brettwooldridge/HikariCP/wiki/Spring-Hibernate -->
    <bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
        <property name="poolName" value="caaersServiceMixConnectionPool" />
        <property name="driverClassName" value="s[datasource.driver]" />
        <property name="jdbcUrl"  value="s[datasource.url]" />
        <property name="username" value="s[datasource.username]" />
        <property name="password"  value="s[datasource.password]" />
        <!--<property name="connectionTestQuery" value="s[datasource.validationQuery:select release from bering_version where release = 1]" /> -->
        <property name="connectionTimeout" value="s[datasource.connectionTimeout:15000]" />
        <property name="idleTimeout" value="s[datasource.idleTimeout:300000]"/>
        <property name="initializationFailFast" value="s[datasource.initializationFailFast:true]" />
        <property name="maximumPoolSize" value="s[datasource.maximumPoolSize:8]" />
        <property name="leakDetectionThreshold" value="s[datasource.leakDetectionThreshold:60000]" />
        <property name="registerMbeans" value="true" />
    </bean>


    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <constructor-arg ref="hikariConfig" />
    </bean>


    <bean id="integrationLogDao" class="gov.nih.nci.cabig.caaers2adeers.track.IntegrationLogDao">
       <property name="hibernateTemplate" ref="hibernateTemplate" />
    </bean>
    <bean id="integrationLogMessageDao" class="gov.nih.nci.cabig.caaers2adeers.track.IntegrationLogMessageDao">
       <property name="hibernateTemplate" ref="hibernateTemplate" />
    </bean>
    
    <bean id="headerGeneratorProcessor" class="gov.nih.nci.cabig.caaers2adeers.exchnage.HeaderGeneratorProcessor"/>
    <bean id="adeersHeaderGeneratorProcessor" class="gov.nih.nci.cabig.caaers2adeers.exchnage.AdeersHeaderGeneratorProcessor"/>
    <bean id="exchangePreProcessor" class="gov.nih.nci.cabig.caaers2adeers.exchnage.ExchangePreProcessor">
        <property name="caaersWSUser" value="s[CAAERS_WS_USERNAME]" />
        <property name="caaersWSPassword" value="s[CAAERS_WS_PASSWORD]" />
        <property name="adeersWSUser" value="s[ADEERS_WS_USERNAME]" />
        <property name="adeersWSPassword" value="s[ADEERS_WS_PASSWORD]" />
    </bean>
    <bean id="crlfFixProcessor" class="gov.nih.nci.cabig.rave2caaers.exchange.CRLFFixProcessor"/>
    <bean id="raveIntegrationHeaderProcessor" class="gov.nih.nci.cabig.rave2caaers.exchange.RaveIntegrationHeaderProcessor"/>
    <bean id="raveCredentialsProcessor" class="gov.nih.nci.cabig.rave2caaers.exchange.CredentialsProcessor" />
    <bean id="errorParserProcessor" class="gov.nih.nci.cabig.report2adeers.exchange.ErrorParserProcessor"/>
    
    <bean id="participantODMMessageProcessor" class="gov.nih.nci.cabig.open2caaers.exchange.ParticipantODMMessageProcessor">
    	<property name="caaersWSUser" value="s[PART_IS_USERNAME]" />
        <property name="caaersWSPassword" value="s[PART_IS_PASSWORD]" />
    </bean> 
     
    <bean id="participantODMMessageBinding" class="gov.nih.nci.cabig.open2caaers.binding.ParticipantODMMessageBinding"/>
    
    <bean id="removeEDIHeadersAndFootersProcessor" class="gov.nih.nci.cabig.report2caaers.exchange.SafetyReportRemoveEDIHeadersAndFootersProcessor"/>
    
    <bean id="eDIMessagePreProcessor" class="gov.nih.nci.cabig.report2caaers.exchange.EDIMessagePreProcessor">
        <property name="caaersWSUser" value="s[CAAERS_WS_USERNAME]" />
        <property name="caaersWSPassword" value="s[CAAERS_WS_PASSWORD]" />
    </bean>
    
    <bean id="addEDIHeadersAndFootersProcessor" class="gov.nih.nci.cabig.report2caaers.exchange.SafetyReportAddEDIHeadersAndFootersProcessor"/>
    
    <bean id="adeersResponseProcessor" class="gov.nih.nci.cabig.report2caaers.exchange.AdeersResponseProcessor"/>
    
    <bean id="resetOriginalMessageProcessor" class="gov.nih.nci.cabig.report2caaers.exchange.ResetOriginalMessageProcessor"/>
    
    <bean id="xslt" class="gov.nih.nci.cabig.caaers2adeers.xslt.CustomXsltComponent" />
    <bean id="threadSafeXsltBuilder" class="gov.nih.nci.cabig.caaers2adeers.xslt.ThreadSafeXsltBuilder">
    </bean>
    <bean id="adeersReportSubmissionProcessor" class="gov.nih.nci.cabig.report2adeers.exchange.AdeersReportSubmissionProcessor" />
    
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
    	<property name="dataSource" ref="dataSource" />
    	<property name="namingStrategy" ref="wonderfulNamingStrategy" />
    	<property name="annotatedClasses">
            <list>
                <value>gov.nih.nci.cabig.caaers2adeers.track.IntegrationLog</value>
                <value>gov.nih.nci.cabig.caaers2adeers.track.IntegrationLogDetail</value>
                <value>gov.nih.nci.cabig.caaers2adeers.track.IntegrationLogMessage</value>
            </list>
		</property>
		<property name="hibernateProperties" ref="hibernateProperties" /> 
    </bean>
    <bean id="wonderfulNamingStrategy" class="gov.nih.nci.cabig.caaers2adeers.hibernate.WonderfulNamingStrategy">
      <property name="uppercaseColumnNames">
       <value>empty_empty</value>
      </property>
     </bean>
     <bean id="hibernateProperties" class="gov.nih.nci.cabig.caaers2adeers.hibernate.HibernatePropertiesFactoryBean">
        <property name="dialectName">
            <value>s[datasource.dialect]</value>
        </property>
        <property name="properties">
            <props>
                <prop key="hibernate.query.substitutions">true 1, false 0, yes 'Y', no 'N'</prop>
                <prop key="hibernate.jdbc.batch_size">30</prop>
                <prop key="hibernate.jdbc.fetch_size">10</prop>

                <!-- make sure the below properties are set to false in production -->
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.format_sql">false</prop>
                <prop key="hibernate.use_sql_comments">false</prop>
                <prop key="hibernate.generate_statistics">false</prop>

                <!-- caching -->
                <!-- <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.SingletonEhCacheProvider</prop> -->

            </props>
        </property>
    </bean>
     
     <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
        <property name="checkWriteOperations">
            <value>false</value>
        </property>
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
    </bean>
     <bean id="fileTracker" class="gov.nih.nci.cabig.caaers2adeers.track.FileTracker">
         <property name="folder" value="s[payloadDir]" />
     </bean>

    <!--=================Route Builders & Cron Jobs Payload related ====================-->

    <bean id="toAdeersRouteBuilder" class="gov.nih.nci.cabig.caaers2adeers.ToAdeersRouteBuilder"/>
    <bean id="toCaaersClientRouteBuilder" class="gov.nih.nci.cabig.caaers2adeers.ToCaaersClientRouteBuilder"/>
    <bean id="toCaaersWebserviceRouteBuilder" class="gov.nih.nci.cabig.caaers2adeers.ToCaaersWebserviceRouteBuilder"/>
    <bean id="toCaaersParticipantWSRouteBuilder" class="gov.nih.nci.cabig.open2caaers.ToCaaersParticipantWSRouteBuilder"/>
    <bean id="fromRaveToCaaersWSRouteBuilder" class="gov.nih.nci.cabig.rave2caaers.FromRaveToCaaersWSRouteBuilder"/>
    <bean id="adeersReportServiceRouteBuilder" class="gov.nih.nci.cabig.report2adeers.ToAdeersReportServiceRouteBuilder"  />
    <bean id="toCaaersReportWSRouteBuilder" class="gov.nih.nci.cabig.report2caaers.ToCaaersReportWSRouteBuilder">
    	<property name="inputEDIDir" value="s[safetyReportEDIInputDir]"/>
    	<property name="outputEDIDir" value="s[safetyReportEDIOutputDir]"/>
    </bean>
    <bean id="adeersResponseToE2BAckRouteBuilder" class="gov.nih.nci.cabig.report2caaers.AdeersResponseToE2BAckRouteBuilder">
    	<property name="outputEDIDir" value="s[safetyReportEDIOutputDir]"/>
    </bean>
    <bean id="cronJobRouteBuilder" class="gov.nih.nci.cabig.caaers2adeers.CronJobRouteBuilder">
    	 <property name="cronExpressions">
    		<map>
    			<entry><key><value>AGENT</value></key><value>s[agentLovCronExpression]</value></entry>
    			<entry><key><value>AGENT_UOM</value></key><value>s[agentDoseLovCronExpression]</value></entry>
    			<entry><key><value>ASAEL</value></key><value>s[asaelLovCronExpression]</value></entry>
    			<entry><key><value>DEVICE</value></key><value>s[deviceLovCronExpression]</value></entry>
    			<entry><key><value>LAB</value></key><value>s[labLovCronExpression]</value></entry>
    			<entry><key><value>PRIOR_THERAPY</value></key><value>s[priorTherapyLovCronExpression]</value></entry>
    			<entry><key><value>PRE_EXISTING_CONDITION</value></key><value>s[preExistingConditionLovCronExpression]</value></entry>
    			<entry><key><value>ORGANIZATION</value></key><value>s[organizationLovCronExpression]</value></entry>
    			<entry><key><value>MERGED_ORGANIZATION</value></key><value>s[mergedOrganizationCronExpression]</value></entry>
    			<entry><key><value>CTCAE</value></key><value>s[ctcaeLovCronExpression]</value></entry>
    		 </map>
    	</property> 
    	<property name="garbageCollectionCronExpression" value="s[garbageCollectionCronExpression]"/>
    </bean>
    <bean id="payloadGenerator" class="gov.nih.nci.cabig.caaers2adeers.cronjob.PayloadGenerator" />
    
    
    <bean id="jmsConnectionFactory"
                class="org.apache.activemq.ActiveMQConnectionFactory">
    	<property name="brokerURL" value="s[inbound.jms.brokerURL]" />
    </bean>

    <bean id="pooledConnectionFactory"
                class="org.apache.activemq.pool.PooledConnectionFactory" 
                init-method="start" destroy-method="stop">
    	<property name="maxConnections" value="6" />
    	<property name="connectionFactory" ref="jmsConnectionFactory" />
    </bean>

    <bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">
    	<property name="connectionFactory" ref="pooledConnectionFactory"/>
    	<property name="concurrentConsumers" value="6"/>
    </bean>

    <bean id="activemq"
    class="org.apache.activemq.camel.component.ActiveMQComponent">
    <property name="configuration" ref="jmsConfig"/>
    </bean>
    
    <!-- Jetty Security handling -->
    
    <!--  
   	<bean id="jetty" class="org.apache.camel.component.jetty.JettyHttpComponent">
	    <property name="sslSocketConnectors">
	        <map>
	            <entry key="7700">
	                <bean class="org.mortbay.jetty.security.SslSocketConnector">
	                    <property name="password" value="s[OPEN-caaers.jetty.ssl.password]"/>
	                    <property name="keyPassword" value="s[OPEN-caaers.jetty.ssl.keypassword]"/>
	                    <property name="keystore" value="s[OPEN-caaers.keyStorePath]"/>
	                    <property name="needClientAuth" value="false"/>
	                </bean>
	            </entry>
	        </map>
	    </property>
	</bean>  -->
	
</beans>
