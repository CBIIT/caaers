<?xml version="1.0" encoding="UTF-8"?>
<project name="caAERS " default="caaers" basedir=".">
	<description>
        certificate test
    </description>
	<!-- set global properties for this build -->
	<property file="${user.home}/.gridenv.properties" />
	<property name="tomcat.download.url" value="@TOMCAT_DOWNLOAD_URL@" />
	<property name="tomcat.file.name" value="apache-tomcat-6.0.33.zip" />
	<property name="tomcat.version" value="apache-tomcat-6.0.33" />
    <property name="servicemix.download.url.windows" value="@SERVICEMIX_DOWNLOAD_URL_WINDOWS@" />
    <property name="servicemix.download.url.unix" value="@SERVICEMIX_DOWNLOAD_URL_UNIX@" />
    <property name="servicemix.file.name" value="apache-servicemix-3.3.2.zip" />
    <property name="servicemix.version" value="apache-servicemix-3.3.2" />
	<property name="caaers.download.url" value="@CAAERS_DOWNLOAD_URL@"/>
	<property name="caaers.file.name" value="caaers.war" />
	<property name="caaers.core.jar" value="caaers-core-*.jar" />

    <property name="adeers.sa.url" value="@ADEERS_SA_DOWNLOAD_URL@" />
    <property name="adeers.sync.sa.url" value="@ADEERS_SYNC_SA_DOWNLOAD_URL@" />
    <property name="adeers.lookup.xml.url" value="@ADEERS_LOOKUP_XML_DOWNLOAD_URL@" />
    <property name="adeers.caxchange.props.url" value="@ADEERS_CAXCHANGE_PROPS_DOWNLOAD_URL@" />
    <property name="adeers.caxchange.conf.zip" value="@ADEERS_CAXCHANGE_CONF_URL@" />

	<property name="temp.dir" value="${user.home}/caaers_temp" />
	<property name="working.dir" value="${temp.dir}/caaers" />
	<property name="extract.dir" value="${working.dir}/extract" />
	<property name="jar.extract.dir" value="${working.dir}/jarextract" />
	<property name="auth.mode" value="local" />

    <tstamp>
        <format property="time.stamp" pattern="yyyy-MM-dd_hh_mm_ss"/>
    </tstamp>
	
	<path id="rules.url">
		<pathelement location="${rules.repository.dir}" />
	</path>
	<path id="trust.store">
		<pathelement location="${webSSO.trustStore}" />
	</path>
	<path id="host.cert">
		<pathelement location="${hostCertificate}" />
	</path>
	<path id="host.key">
		<pathelement location="${hostKey}" />
	</path>
	<path id="bering.classpath">
		<fileset dir="${extract.dir}/WEB-INF/lib">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<path id="xmltaskdef.cp">
		<fileset dir="${basedir}/resources/lib">
			<include name="xmltask-v1.13.jar" />
		</fileset>
	</path>
	<path id="dbunittaskdef.cp">
		<fileset dir="${basedir}/resources/lib">
			<include name="dbunit-2.1.jar" />
		</fileset>
	</path>
	<path id="customlib.cp">
		<fileset dir="${basedir}/resources/custom_libs">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask" classpathref="xmltaskdef.cp" />
	<!-- These are the only 5 conditions which needs to 

      requires.tomcat.installation

      use.existing.tomcat.requires.https.enabling

      use.existing.tomcat.no.https.enabling.required

      use.user.tomcat.requires.https.enabling

      use.user.tomcat.no.https.enabling.required

    -->
	<!-- CONDITION 1 -->
	<condition property="requires.tomcat.installation">
        <and>
            <equals arg1="${user.tomcat.selection}" arg2="new" />
            <isset property="tomcat.install.dir"/>
        </and>

	</condition>
	<!-- CONDITION 2 -->
	<condition property="use.existing.tomcat.requires.https.enabling">
		<and>
            <equals arg1="${user.tomcat.selection}" arg2="specify" />
            <isset property="user.ext.tomcat.home"/>
			<!--<equals arg1="${user.tomcat.https.enabled}" arg2="false" />-->
            <equals arg1="${user.tomcat.configure.ssl}" arg2="true" />
		</and>
	</condition>
	<!-- CONDITION 3 -->
	<condition property="use.existing.tomcat.no.https.enabling.required">
		<and>
            <equals arg1="${user.tomcat.selection}" arg2="specify" />
            <isset property="user.ext.tomcat.home"/>
			<!--<equals arg1="${user.tomcat.https.enabled}" arg2="true" />-->
            <equals arg1="${user.tomcat.configure.ssl}" arg2="false" />
		</and>
	</condition>
	<!-- CONDITION 4 -->
	<condition property="use.user.tomcat.requires.https.enabling">
		<and>
			<equals arg1="${user.tomcat.https.enabled}" arg2="false" />
			<equals arg1="${tomcat.exist}" arg2="false" />
			<equals arg1="${user.tomcat.exist}" arg2="true" />
		</and>
	</condition>
	<!-- CONDITION 5 -->
	<condition property="use.user.tomcat.no.https.enabling.required">
		<and>
			<equals arg1="${user.tomcat.https.enabled}" arg2="true" />
			<equals arg1="${tomcat.exist}" arg2="false" />
			<equals arg1="${user.tomcat.exist}" arg2="true" />
		</and>
	</condition>
	<condition property="should.run.csm.policy">
		<and>
			<equals arg1="${csm.populated}" arg2="false" />
		</and>
	</condition>
	
	<condition property="websso.properties.required">
		<and>
			<equals arg1="${auth.mode}" arg2="webSSO" />
		</and>
	</condition>
	
	<condition property="websso.properties.not.required">
			<and>
				<equals arg1="${auth.mode}" arg2="local" />
			</and>
	</condition>
	
	<target name="mytest">
		<echo message="C S M :${csm.populated}" />
	</target>
	<target name="init">
		<delete dir="${temp.dir}" />
		<mkdir dir="${temp.dir}" />
		<mkdir dir="${working.dir}" />
		<mkdir dir="${extract.dir}" />
		<mkdir dir="${jar.extract.dir}" />
		<echo message="Https:${user.tomcat.https.enabled}" />
	</target>

    <condition property="isWindows">
        <os family="windows"/>
    </condition>

    <condition property="servicemix.download.url" value="${servicemix.download.url.windows}" else="${servicemix.download.url.unix}">
        <os family="windows"/>
    </condition>

    <condition property="requires.servicemix.installation">
        <and>
            <equals arg1="${user.servicemix.selection}" arg2="new" />
            <isset property="servicemix.install.dir"/>
        </and>

    </condition>

    <condition property="use.existing.servicemix">
        <and>
            <equals arg1="${user.servicemix.selection}" arg2="specify" />
            <isset property="user.ext.servicemix.home"/>
        </and>
    </condition>
	<!--

	                                  ******************

	                                  *** target_1    ****

	                                  ******************

	         -->
	<target name="requires_tomcat_installation" if="requires.tomcat.installation">
		<echo message="Configuring for  and condition 1" />
		<antcall target="download_and_install_tomcat">
			<param name="install.dir" value="${tomcat.install.dir}" />
		</antcall>
		<antcall target="configureServer.xml">
			<param name="tomcat.temp.home" value="${tomcat.install.dir}/${tomcat.version}" />
		</antcall>
		<antcall target="setUpConfDirectory">
			<param name="tomcat.temp.home" value="${tomcat.install.dir}/${tomcat.version}" />
		</antcall>
		<antcall target="download_and_install_caaers">
			<param name="tomcat.temp.home" value="${tomcat.install.dir}/${tomcat.version}" />
		</antcall>
		<propertyfile file="${user.home}/.gridenv.properties">
			<entry key="CATALINA_HOME" value="${tomcat.install.dir}/${tomcat.version}" />
			<entry key="tomcat.exist" value="true" />
			<entry key="tomcat.https.enabled" value="true" />
		</propertyfile>
	</target>
	<!--

		                                  ******************

		                                  *** target_2    ****

		                                  ******************

		         -->
	<target name="use_existing_tomcat_requires_https_enabling" if="use.existing.tomcat.requires.https.enabling">
		<echo message="Configuring for target condition 2" />
		<antcall target="configureServer.xml">
			<param name="tomcat.temp.home" value="${user.ext.tomcat.home}" />
		</antcall>
		<antcall target="setUpConfDirectory">
			<param name="tomcat.temp.home" value="${user.ext.tomcat.home}" />
		</antcall>
		<antcall target="download_and_install_caaers">
			<param name="tomcat.temp.home" value="${user.ext.tomcat.home}" />
		</antcall>
		<propertyfile file="${user.home}/.gridenv.properties">
            <entry key="CATALINA_HOME" value="${user.ext.tomcat.home}" />
            <entry key="tomcat.exist" value="true" />
            <entry key="tomcat.https.enabled" value="true" />
		</propertyfile>
	</target>
	<!--

		                                  ******************

		                                  *** target_3    ****

		                                  ******************

		         -->
	<target name="use_existing_tomcat_no_https_enabling_required" if="use.existing.tomcat.no.https.enabling.required">
		<echo message="Configuring for condition 3" />
		<antcall target="setUpConfDirectory">
			<param name="tomcat.temp.home" value="${user.ext.tomcat.home}" />
		</antcall>
		<antcall target="download_and_install_caaers">
			<param name="tomcat.temp.home" value="${user.ext.tomcat.home}" />
		</antcall>
		<propertyfile file="${user.home}/.gridenv.properties">
            <entry key="CATALINA_HOME" value="${user.ext.tomcat.home}" />
			<entry key="tomcat.exist" value="true" />
			<entry key="tomcat.https.enabled" value="true" />
		</propertyfile>
	</target>
	<!--

		                                  ******************

		                                  *** target_4    ****

		                                  ******************

		         -->
	<target name="use_user_tomcat_requires_https_enabling" if="use.user.tomcat.requires.https.enabling">
		<echo message="Configuring for condition 4" />
		<antcall target="configureServer.xml">
			<param name="tomcat.temp.home" value="${user.ext.tomcat.home}" />
		</antcall>
		<antcall target="setUpConfDirectory">
			<param name="tomcat.temp.home" value="${user.ext.tomcat.home}" />
		</antcall>
		<antcall target="download_and_install_caaers">
			<param name="tomcat.temp.home" value="${user.ext.tomcat.home}" />
		</antcall>
		<propertyfile file="${user.home}/.gridenv.properties">
			<entry key="CATALINA_HOME" value="${user.ext.tomcat.home}" />
			<entry key="tomcat.exist" value="true" />
			<entry key="tomcat.https.enabled" value="true" />
		</propertyfile>
	</target>
	<!--

			                                  ******************

			                                  *** target_5    ****

			                                  ******************

			         -->
	<target name="use_user_tomcat_no_https_enabling_required" if="use.user.tomcat.no.https.enabling.required">
		<echo message="Configuring for target condition 5" />
		<antcall target="setUpConfDirectory">
			<param name="tomcat.temp.home" value="${user.ext.tomcat.home}" />
		</antcall>
		<antcall target="download_and_install_caaers">
			<param name="tomcat.temp.home" value="${user.ext.tomcat.home}" />
		</antcall>
		<propertyfile file="${user.home}/.gridenv.properties">
			<entry key="CATALINA_HOME" value="${user.ext.tomcat.home}" />
			<entry key="tomcat.exist" value="true" />
			<entry key="tomcat.https.enabled" value="true" />
		</propertyfile>
	</target>


    <target name="requires_servicemix_installation" if="requires.servicemix.installation">
        <echo message="Configuring for servicemix and condition 1" />
        <antcall target="download_and_install_servicemix">
            <param name="install.dir" value="${servicemix.install.dir}" />
        </antcall>
        <antcall target="download_and_install_adeers_assembly">
            <param name="servicemix.temp.home" value="${servicemix.install.dir}/${servicemix.version}" />
        </antcall>
        <propertyfile file="${user.home}/.gridenv.properties">
            <entry key="SERVICEMIX_HOME" value="${servicemix.install.dir}/${servicemix.version}" />
        </propertyfile>
    </target>

    <target name="use_existing_servicemix" if="use.existing.servicemix">
        <echo message="Configuring for servicemix and condition 2" />
        <antcall target="clean_servicemix">
            <param name="servicemix.temp.home" value="${user.ext.servicemix.home}" />
        </antcall>
        <antcall target="download_and_install_adeers_assembly">
            <param name="servicemix.temp.home" value="${user.ext.servicemix.home}" />
        </antcall>

        <propertyfile file="${user.home}/.gridenv.properties">
            <entry key="SERVICEMIX_HOME" value="${user.ext.servicemix.home}" />
        </propertyfile>
    </target>

	<!--

			 *************************************************************************************************

			 ***************   Main Tagert                                                    ****************

			 *************************************************************************************************

 	 -->
	<target name="caaers">
        <antcall target="requires_servicemix_installation" />
        <antcall target="use_existing_servicemix" />
		<antcall target="requires_tomcat_installation" />
		<antcall target="use_existing_tomcat_requires_https_enabling" />
		<antcall target="use_existing_tomcat_no_https_enabling_required" />
		<antcall target="use_user_tomcat_requires_https_enabling" />
		<antcall target="use_user_tomcat_no_https_enabling_required" />
	</target>
	<!--

	 		 *************************************************************************************************

	 		 ***************   End of Main Target                                             ****************

	 		 *************************************************************************************************

 	 -->
	<target name="configureServer.xml">
        <copy file="${tomcat.temp.home}/conf/server.xml" tofile="${tomcat.temp.home}/conf/server.xml.bkup.${time.stamp}" overwrite="true" failonerror="false"/>
        <echo message="tomcat.temp.home is ${tomcat.temp.home}"/>
		<xmltask source="${tomcat.temp.home}/conf/server.xml" dest="${tomcat.temp.home}/conf/server.xml">
            <remove path="/Server/Service/Connector[@scheme='https']" />
		</xmltask>
		<xmltask source="${tomcat.temp.home}/conf/server.xml" dest="${tomcat.temp.home}/conf/server.xml">
			<insert path="/Server/Service[@name='Catalina']" file="${basedir}/resources/templates/tomcat/serverTemplate.xml" />
		</xmltask>
		<mkdir dir="${tomcat.temp.home}/conf/cabig" />
		<copy file="${basedir}/resources/templates/conf/caaers_keystore.xml" tofile="${tomcat.temp.home}/conf/cabig/caaers_keystore" overwrite="true" />
	</target>

	<target name="download_and_install_tomcat">
		<delete dir="${install.dir}/${tomcat.version}" />
		<delete dir="${basedir}/tomcat_temp" />
		<mkdir dir="${basedir}/tomcat_temp" />
		<get src="${tomcat.download.url}" dest="${basedir}/tomcat_temp/${tomcat.file.name}" />
		<unzip src="${basedir}/tomcat_temp/${tomcat.file.name}" dest="${install.dir}" />
		<delete dir="${basedir}/tomcat_temp" />
	</target>


	<target name="setUpConfDirectory" >

        <move file="${tomcat.temp.home}/conf/cabig/csm_jaas.config" tofile="${tomcat.temp.home}/conf/cabig/csm_jaas.config.bkup.${time.stamp}" overwrite="true" 
        	failonerror="false"/>

		<antcall target="copy_csm_jass_config" />
		
		<replace file="${tomcat.temp.home}/conf/cabig/csm_jaas.config" token="@DB_USER@" value="${database.userid}" />
		<replace file="${tomcat.temp.home}/conf/cabig/csm_jaas.config" token="@DB_PASSWORD@" value="${database.password}" />
		<replace file="${tomcat.temp.home}/conf/cabig/csm_jaas.config" token="@DB_HOST@" value="${database.host.name}" />
		<replace file="${tomcat.temp.home}/conf/cabig/csm_jaas.config" token="@DB_PORT@" value="${database.host.port}" />
		<replace file="${tomcat.temp.home}/conf/cabig/csm_jaas.config" token="@DB_NAME@" value="${database.name}" />
		<propertyfile file="${tomcat.temp.home}/conf/catalina.properties">
			<entry key="java.security.auth.login.config" value="$${catalina.home}/conf/cabig/csm_jaas.config" />
		</propertyfile>
		<mkdir dir="${tomcat.temp.home}/conf/caaers" />
		<mkdir dir="${user.home}/.caaers" />
		<mkdir dir="${basedir}/conf_temp" />

		<copy file="${basedir}/resources/templates/conf/${database.vendor}.datasource.properties" tofile="${basedir}/conf_temp/datasource.properties" overwrite="true" />
		<replace file="${basedir}/conf_temp/datasource.properties" token="@DB_USER@" value="${database.userid}" />
		<replace file="${basedir}/conf_temp/datasource.properties" token="@DB_PASSWORD@" value="${database.password}" />
		<replace file="${basedir}/conf_temp/datasource.properties" token="@DB_HOST@" value="${database.host.name}" />
		<replace file="${basedir}/conf_temp/datasource.properties" token="@DB_PORT@" value="${database.host.port}" />
		<replace file="${basedir}/conf_temp/datasource.properties" token="@DB_NAME@" value="${database.name}" />
		<replace file="${basedir}/conf_temp/datasource.properties" token="@CSM_DB_USER@" value="${database.userid}" />
		<replace file="${basedir}/conf_temp/datasource.properties" token="@CSM_DB_PASSWORD@" value="${database.password}" />
		<replace file="${basedir}/conf_temp/datasource.properties" token="@CSM_DB_HOST@" value="${database.host.name}" />
		<replace file="${basedir}/conf_temp/datasource.properties" token="@CSM_DB_PORT@" value="${database.host.port}" />
		<replace file="${basedir}/conf_temp/datasource.properties" token="@CSM_DB_NAME@" value="${database.name}" />
		<pathconvert property="modified.rules.url" refid="rules.url">
			<filtermapper>
				<replacestring from="\" to="/" />
			</filtermapper>
		</pathconvert>
		<replace file="${basedir}/conf_temp/datasource.properties" token="@URL@" value="${modified.rules.url}" />
		
		<replace file="${basedir}/conf_temp/datasource.properties" token="@AUTH_MODE@" value="${auth.mode}" />
		
		<antcall target="websso.properties.required" />
		<antcall target="websso.properties.not.required" />
		
		<copy file="${basedir}/conf_temp/datasource.properties" todir="${tomcat.temp.home}/conf/caaers" overwrite="true" />
		<copy file="${basedir}/conf_temp/datasource.properties" todir="${user.home}/.caaers" overwrite="true" />
		<delete dir="${basedir}/conf_temp" />
		
	</target>
	
	<!-- webSSO properties will be replaced in datasource.properties file for webSSO mode-->
	<target name="websso.properties.required" if="websso.properties.required">
		<echo message="webSSO Mode" />
			 		
		<replace file="${basedir}/conf_temp/datasource.properties" token="@WEBSSO_BASEURL@" value="${webSSO.server.baseUrl}" />
		<replace file="${basedir}/conf_temp/datasource.properties" token="@WEBSSO_SERVER_ADDRESS@" value="${webSSO.server.address}" />
		<replace file="${basedir}/conf_temp/datasource.properties" token="@WEBSSO_SERVER_PORT@" value="${webSSO.server.port}" />		
		<replace file="${basedir}/conf_temp/datasource.properties" token="@ACEGI_URL@" value="${webSSO.cas.acegi.security.url}" />
		<replace file="${basedir}/conf_temp/datasource.properties" token="@STUDY_CONSUMER_URL@" value="${grid.studyconsumer.url}" />
		<replace file="${basedir}/conf_temp/datasource.properties" token="@REGISTRATION_CONSUMER_URL@" value="${grid.registrationconsumer.url}" />

		<pathconvert property="modified.trust.store" refid="trust.store">
			<filtermapper>
				<replacestring from="\" to="/" />
			</filtermapper>
		</pathconvert>
		<replace file="${basedir}/conf_temp/datasource.properties" token="@TRUST_STORE@" value="${modified.trust.store}" />
		
	 	<pathconvert property="modified.host.cert" refid="host.cert">
			<filtermapper>
				<replacestring from="\" to="/" />
			</filtermapper>
		</pathconvert>
		<replace file="${basedir}/conf_temp/datasource.properties" token="@HOST_CERT@" value="${modified.host.cert}" />
	 	
		<pathconvert property="modified.host.key" refid="host.key">
			<filtermapper>
				<replacestring from="\" to="/" />
			</filtermapper>
		</pathconvert>
		<replace file="${basedir}/conf_temp/datasource.properties" token="@HOST_KEY@" value="${modified.host.key}" />
		
	 	<antcall target="install_cert" />
			
	</target>
	
	<!-- webSSO properties will be removed from datasource.properties file for local mode-->
	<target name="websso.properties.not.required" if="websso.properties.not.required">
		<echo message="Local Mode" />
	   	<replace file="${basedir}/conf_temp/datasource.properties" token="webSSO.server.baseUrl=@WEBSSO_BASEURL@" value="" />
		<replace file="${basedir}/conf_temp/datasource.properties" token="webSSO.server.address=@WEBSSO_SERVER_ADDRESS@" value="" />
		<replace file="${basedir}/conf_temp/datasource.properties" token="webSSO.server.port=@WEBSSO_SERVER_PORT@" value="" />		
		<replace file="${basedir}/conf_temp/datasource.properties" token="webSSO.trustStore=@TRUST_STORE@" value="" />
		<replace file="${basedir}/conf_temp/datasource.properties" token="hostCertificate=@HOST_CERT@" value="" />
		<replace file="${basedir}/conf_temp/datasource.properties" token="hostKey=@HOST_KEY@" value="" />
	 	<replace file="${basedir}/conf_temp/datasource.properties" token="webSSO.cas.acegi.security.url=@ACEGI_URL@" value="" />
	 	<replace file="${basedir}/conf_temp/datasource.properties" token="grid.studyconsumer.url=@STUDY_CONSUMER_URL@" value="" />
		<replace file="${basedir}/conf_temp/datasource.properties" token="grid.registrationconsumer.url=@REGISTRATION_CONSUMER_URL@" value="" />
	</target>


    <target name="download_and_install_servicemix">
        <delete dir="${install.dir}/${servicemix.version}" />
    	<delete dir="${basedir}/servicemix_temp" />
        <mkdir dir="${basedir}/servicemix_temp" />
        <get src="${servicemix.download.url}" dest="${basedir}/servicemix_temp/${servicemix.file.name}" />
        <unzip src="${basedir}/servicemix_temp/${servicemix.file.name}" dest="${install.dir}" />
        <delete dir="${basedir}/servicemix_temp" />
    </target>
	
	<!--
		This target will download caaers.war from the remote location. Then will unwar, and unjar 
		the caaers-core-xxx.jar, inorder to extract the groovy files and run bering migration.
	-->
	<target name="download_and_install_caaers" depends="init">
		<delete dir="${tomcat.temp.home}/work/Catalina/localhost/caaers" />
		<delete dir="${tomcat.temp.home}/webapps/caaers" />
		<delete file="${tomcat.temp.home}/webapps/caaers.war" />
		
		<get src="${caaers.download.url}" dest="${working.dir}/${caaers.file.name}" />
		
		<unwar src="${working.dir}/${caaers.file.name}" dest="${working.dir}/extract" />
		<unjar dest="${jar.extract.dir}">
		   <fileset dir="${extract.dir}/WEB-INF/lib">
		    <include name="${caaers.core.jar}"/>
		   </fileset>
		</unjar> 
		
		<copy file="${working.dir}/${caaers.file.name}" todir="${tomcat.temp.home}/webapps" />
		
		<antcall target="migrate" />
		<antcall target="create-user" />
		<delete dir="${user.home}/caaers_download_temp" />
	</target>

    <target name="clean_servicemix" depends="init">

        <delete file="${servicemix.temp.home}/lib/caaers-adeers-client*.zip" />
        <delete file="${servicemix.temp.home}/lib/optional/caaers-adeers-client*.zip" />
        <delete file="${servicemix.temp.home}/hotdeploy/*caaers*" />

        <delete dir="${servicemix.temp.home}/bin/data" />
        <delete dir="${servicemix.temp.home}/data" />

        <mkdir dir="${basedir}/servicemix_temp"/>

        <get src="${adeers.caxchange.conf.zip}" dest="${basedir}/servicemix_temp/caXchangeConf.zip" />

        <unzip src="${basedir}/servicemix_temp/caXchangeConf.zip" dest="${servicemix.temp.home}/conf" />

        <delete dir="${basedir}/servicemix_temp" />

    </target>

    <target name="download_and_install_adeers_assembly" depends="init">

        <delete file="${servicemix.temp.home}/hotdeploy/caaers-adeers-sa.zip" />
        <delete file="${servicemix.temp.home}/hotdeploy/caaers-adeers-sync-sa.zip" />

        <move file="${servicemix.temp.home}/lookup.xml" tofile="${servicemix.temp.home}/lookup.xml.bkup.${time.stamp}" failonerror="false"/>
        <move file="${servicemix.temp.home}/conf/caxchange.properties" tofile="${servicemix.temp.home}/conf/caxchange.properties.bkup.${time.stamp}" failonerror="false"/>

        <get src="${adeers.sa.url}" dest="${servicemix.temp.home}/hotdeploy/caaers-adeers-sa.zip" />
        <get src="${adeers.sync.sa.url}" dest="${servicemix.temp.home}/hotdeploy/caaers-adeers-sync-sa.zip" />
        <get src="${adeers.lookup.xml.url}" dest="${servicemix.temp.home}/lookup.xml" />
        <get src="${adeers.caxchange.props.url}" dest="${servicemix.temp.home}/conf/caxchange.properties" />

    </target>

    <target name="define-vars">
		<condition property="datasource.dialect" value="gov.nih.nci.cabig.caaers.tools.hibernate.ImprovedPostgreSQLDialect">
			<contains string="${database.vendor}" substring="post" />
		</condition>
		<condition property="datasource.dialect" value="org.hibernate.dialect.Oracle9Dialect">
			<contains string="${database.vendor}" substring="ora" />
		</condition>
		<condition property="datasource.url" value="jdbc:postgresql://${database.host.name}:${database.host.port}/${database.name}">
			<contains string="${database.vendor}" substring="post" />
		</condition>
		<condition property="datasource.url" value="jdbc:oracle:thin:@${database.host.name}:${database.host.port}:${database.name}">
			<contains string="${database.vendor}" substring="ora" />
		</condition>
		<condition property="datasource.driver" value="org.postgresql.Driver">
			<contains string="${database.vendor}" substring="post" />
		</condition>
		<condition property="datasource.driver" value="oracle.jdbc.OracleDriver">
			<contains string="${database.vendor}" substring="ora" />
		</condition>
	</target>
	<target name="prepare-bering" depends="define-vars">
		<!--Taskdef. Has to be done inside since classpath is ext-->
		<taskdef resource="edu/northwestern/bioinformatics/bering/antlib.xml" classpathref="bering.classpath" />
		<property name="oracle.keyword" value="Oracle" />
		<property name="postgresql.keyword" value="PostgreSQLDialect" />
		<condition property="bering.dialect" value="edu.northwestern.bioinformatics.bering.dialect.PostgreSQL">
			<contains string="${datasource.dialect}" substring="${postgresql.keyword}" />
		</condition>
		<condition property="bering.dialect" value="edu.northwestern.bioinformatics.bering.dialect.Oracle">
			<contains string="${datasource.dialect}" substring="${oracle.keyword}" />
		</condition>
	</target>
	<target name="migrate" depends="prepare-bering">
		<migrate classpathRef="bering.classpath" driver="${datasource.driver}" dialect="${bering.dialect}" url="${datasource.url}" userid="${database.userid}" password="${database.password}" migrationsDir="${jar.extract.dir}/db/migrate" />
	</target>
	<target name="csm-init">
		<taskdef name="dbunit" classname="org.dbunit.ant.DbUnitTask" classpathref="dbunittaskdef.cp" />
	</target>
	
	<target name="create-user-properties">
		<java classname="gov.nih.nci.caaersinstaller.util.CreateUserUtil">
          	<arg value="${ccts.username}"/>
		  	<arg value="${ccts.password}"/>
			<arg value="${extract.dir}/"/> 
			<classpath refid="customlib.cp"/>
       </java>
	</target>

    <target name="check-csm-users" description="checks for presence of csm users" depends="create-user-properties,define-vars">

    <echo message="${datasource.driver}"/>
    <echo message="${datasource.url}"/>
    <echo message="${database.userid}"/>
    <echo message="${database.password}"/>
    <property file="${extract.dir}/user.properties"/>
    <echo message="${user.username}"/>
    <echo message="${user.password}"/>

    <delete file="${user.home}/csm_query_output.txt"/>

    <sql driver="${datasource.driver}" userid="${database.userid}" password="${database.password}" url="${datasource.url}"
         classpathref="bering.classpath" onerror="abort" autocommit="true" rdbms="postgresql"
         output="${user.home}/csm_query_output.txt" print="true" showheaders="false">
        SELECT 'no_of_users='|| count(user_id) from csm_user where login_name = '${user.username}';
    </sql>

    <sql driver="${datasource.driver}" userid="${database.userid}" password="${database.password}" url="${datasource.url}"
         classpathref="bering.classpath" onerror="abort" autocommit="true" rdbms="oracle"
         output="${user.home}/csm_query_output.txt" print="true" showheaders="false">
        SELECT concat('no_of_users=', count(user_id)) from csm_user  where login_name = '${user.username}';
    </sql>

    <property file="${user.home}/csm_query_output.txt"/>

     <condition property="csm.users.exist">
         <and>
             <isset property="no_of_users"/>
             <not>
                <equals arg1="${no_of_users}" arg2="0"/>
             </not>
         </and>
     </condition>

        <echo message="${no_of_users}"/>
        <echo message="${csm.users.exist}"/>
    </target>
		
	<target name="create-user" unless="csm.users.exist" description="create user with all caAERS related roles." depends="check-csm-users, create-user-properties,define-vars">
		   
		<echo message="${datasource.driver}"/>    
		<echo message="${datasource.url}"/>    
		<echo message="${database.userid}"/>    
		<echo message="${database.password}"/>
		<property file="${extract.dir}/user.properties"/> 
		<echo message="${user.username}"/>
		<echo message="${user.password}"/>


		<sql driver="${datasource.driver}" userid="${database.userid}" password="${database.password}" url="${datasource.url}"
			classpathref="bering.classpath" onerror="abort" autocommit="true" rdbms="postgresql" >

            INSERT INTO csm_user(user_id, login_name, first_name, last_name,"password", email_id, start_date)
            VALUES ((select nextval('csm_user_user_id_seq')),
                    '${user.username}','${user.username}','${user.username}','${user.password}','${ccts.admin.email}', now() );

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES ((select nextval('csm_user_grou_user_group_i_seq')),
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'system_administrator'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES ((select nextval('csm_user_grou_user_group_i_seq')),
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'business_administrator'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES ((select nextval('csm_user_grou_user_group_i_seq')),
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'person_and_organization_information_manager'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES ((select nextval('csm_user_grou_user_group_i_seq')),
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'data_importer'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES ((select nextval('csm_user_grou_user_group_i_seq')),
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'user_administrator'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES ((select nextval('csm_user_grou_user_group_i_seq')),
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'study_qa_manager'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES ((select nextval('csm_user_grou_user_group_i_seq')),
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'study_creator'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES ((select nextval('csm_user_grou_user_group_i_seq')),
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'supplemental_study_information_manager'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES ((select nextval('csm_user_grou_user_group_i_seq')),
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'study_team_administrator'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES ((select nextval('csm_user_grou_user_group_i_seq')),
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'study_site_participation_administrator'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES ((select nextval('csm_user_grou_user_group_i_seq')),
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'ae_rule_and_report_manager'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES ((select nextval('csm_user_grou_user_group_i_seq')),
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'registration_qa_manager'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES ((select nextval('csm_user_grou_user_group_i_seq')),
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'subject_manager'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES ((select nextval('csm_user_grou_user_group_i_seq')),
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'registrar'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES ((select nextval('csm_user_grou_user_group_i_seq')),
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'ae_reporter'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES ((select nextval('csm_user_grou_user_group_i_seq')),
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'ae_expedited_report_reviewer'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES ((select nextval('csm_user_grou_user_group_i_seq')),
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'ae_study_data_reviewer'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES ((select nextval('csm_user_grou_user_group_i_seq')),
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'data_reader'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES ((select nextval('csm_user_grou_user_group_i_seq')),
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'data_analyst'));

            INSERT INTO csm_protection_group(protection_group_id, protection_group_name, protection_group_description, application_id,update_date,large_element_count_flag)
            VALUES ((select nextval('csm_protectio_protection_g_seq')),'HealthcareSite','All Sites',
                    (select application_id from csm_application where application_name = 'CTMS_SUITE'),
                    '2010-10-01',0);

            INSERT INTO csm_protection_element(protection_element_id, protection_element_name, protection_element_description, object_id, application_id, update_date)
            VALUES ((select nextval('csm_protectio_protection_e_seq')),'HealthcareSite','All Sites','HealthcareSite',
                    (select application_id from csm_application where application_name = 'CTMS_SUITE'),
                    '2010-10-01');

            INSERT INTO csm_pg_pe(pg_pe_id, protection_group_id, protection_element_id, update_date)
            VALUES ((select nextval('csm_pg_pe_pg_pe_id_seq')),
                    (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                    (select protection_element_id from csm_protection_element where protection_element_name = 'HealthcareSite'),
                    '2010-10-01');

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES ((select nextval('csm_user_grou_user_group_r_seq')),
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'person_and_organization_information_manager'),'2010-10-01');


            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES ((select nextval('csm_user_grou_user_group_r_seq')),
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'user_administrator'),'2010-10-01');

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES ((select nextval('csm_user_grou_user_group_r_seq')),
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'study_qa_manager'),'2010-10-01');

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES ((select nextval('csm_user_grou_user_group_r_seq')),
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'study_creator'),'2010-10-01');

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES ((select nextval('csm_user_grou_user_group_r_seq')),
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'supplemental_study_information_manager'),'2010-10-01');

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES ((select nextval('csm_user_grou_user_group_r_seq')),
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'study_team_administrator'),'2010-10-01');

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES ((select nextval('csm_user_grou_user_group_r_seq')),
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'study_site_participation_administrator'),'2010-10-01');

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES ((select nextval('csm_user_grou_user_group_r_seq')),
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'registration_qa_manager'),'2010-10-01');

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES ((select nextval('csm_user_grou_user_group_r_seq')),
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'subject_manager'),'2010-10-01');

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES ((select nextval('csm_user_grou_user_group_r_seq')),
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'registrar'),'2010-10-01');

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES ((select nextval('csm_user_grou_user_group_r_seq')),
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'ae_reporter'),'2010-10-01');

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES ((select nextval('csm_user_grou_user_group_r_seq')),
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'ae_expedited_report_reviewer'),'2010-10-01');

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES ((select nextval('csm_user_grou_user_group_r_seq')),
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'ae_study_data_reviewer'),'2010-10-01');

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES ((select nextval('csm_user_grou_user_group_r_seq')),
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'data_reader'),'2010-10-01');

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES ((select nextval('csm_user_grou_user_group_r_seq')),
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'data_analyst'),'2010-10-01');

		</sql>


        <sql driver="${datasource.driver}" userid="${database.userid}" password="${database.password}" url="${datasource.url}"
            classpathref="bering.classpath" onerror="abort" autocommit="true" rdbms="oracle">

            INSERT INTO csm_user(user_id, login_name, first_name, last_name,password, email_id, start_date)
            VALUES (csm_user_user_id_seq.nextval,
                    '${user.username}','${user.username}','${user.username}','${user.password}','${ccts.admin.email}' , sysdate);

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES (csm_user_grou_user_group_i_seq.nextval,
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'system_administrator'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES (csm_user_grou_user_group_i_seq.nextval,
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'business_administrator'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES (csm_user_grou_user_group_i_seq.nextval,
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'person_and_organization_information_manager'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES (csm_user_grou_user_group_i_seq.nextval,
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'data_importer'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES (csm_user_grou_user_group_i_seq.nextval,
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'user_administrator'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES (csm_user_grou_user_group_i_seq.nextval,
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'study_qa_manager'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES (csm_user_grou_user_group_i_seq.nextval,
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'study_creator'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES (csm_user_grou_user_group_i_seq.nextval,
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'supplemental_study_information_manager'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES (csm_user_grou_user_group_i_seq.nextval,
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'study_team_administrator'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES (csm_user_grou_user_group_i_seq.nextval,
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'study_site_participation_administrator'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES (csm_user_grou_user_group_i_seq.nextval,
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'ae_rule_and_report_manager'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES (csm_user_grou_user_group_i_seq.nextval,
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'registration_qa_manager'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES (csm_user_grou_user_group_i_seq.nextval,
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'subject_manager'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES (csm_user_grou_user_group_i_seq.nextval,
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'registrar'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES (csm_user_grou_user_group_i_seq.nextval,
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'ae_reporter'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES (csm_user_grou_user_group_i_seq.nextval,
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'ae_expedited_report_reviewer'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES (csm_user_grou_user_group_i_seq.nextval,
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'ae_study_data_reviewer'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES (csm_user_grou_user_group_i_seq.nextval,
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'data_reader'));

            INSERT INTO csm_user_group(user_group_id, user_id, group_id)
            VALUES (csm_user_grou_user_group_i_seq.nextval,
                    ((select user_id from csm_user where login_name = '${user.username}')),
                    (select group_id from csm_group where group_name = 'data_analyst'));

            INSERT INTO csm_protection_group(protection_group_id, protection_group_name, protection_group_description, application_id,update_date,large_element_count_flag)
            VALUES (csm_protectio_protection_g_seq.nextval,'HealthcareSite','All Sites',
                    (select application_id from csm_application where application_name = 'CTMS_SUITE'),
                    SYSDATE,0);

            INSERT INTO csm_protection_element(protection_element_id, protection_element_name, protection_element_description, object_id, application_id, update_date)
            VALUES (csm_protectio_protection_e_seq.nextval,'HealthcareSite','All Sites','HealthcareSite',
                    (select application_id from csm_application where application_name = 'CTMS_SUITE'),
                    SYSDATE);

            INSERT INTO csm_pg_pe(pg_pe_id, protection_group_id, protection_element_id, update_date)
            VALUES (csm_pg_pe_pg_pe_id_seq.nextval,
                    (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                    (select protection_element_id from csm_protection_element where protection_element_name = 'HealthcareSite'),
                    SYSDATE);


            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES (csm_user_grou_user_group_r_seq.nextval,
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'person_and_organization_information_manager'),SYSDATE);

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES (csm_user_grou_user_group_r_seq.nextval,
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'user_administrator'),SYSDATE);

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES (csm_user_grou_user_group_r_seq.nextval,
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'study_qa_manager'),SYSDATE);

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES (csm_user_grou_user_group_r_seq.nextval,
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'study_creator'),SYSDATE);

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES (csm_user_grou_user_group_r_seq.nextval,
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'supplemental_study_information_manager'),SYSDATE);

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES (csm_user_grou_user_group_r_seq.nextval,
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'study_team_administrator'),SYSDATE);

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES (csm_user_grou_user_group_r_seq.nextval,
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'study_site_participation_administrator'),SYSDATE);


            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES (csm_user_grou_user_group_r_seq.nextval,
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'registration_qa_manager'),SYSDATE);

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES (csm_user_grou_user_group_r_seq.nextval,
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'subject_manager'),SYSDATE);

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES (csm_user_grou_user_group_r_seq.nextval,
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'registrar'),SYSDATE);

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES (csm_user_grou_user_group_r_seq.nextval,
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'ae_reporter'),SYSDATE);

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES (csm_user_grou_user_group_r_seq.nextval,
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'ae_expedited_report_reviewer'),SYSDATE);

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES (csm_user_grou_user_group_r_seq.nextval,
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'ae_study_data_reviewer'),SYSDATE);

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES (csm_user_grou_user_group_r_seq.nextval,
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'data_reader'),SYSDATE);

            INSERT INTO csm_user_group_role_pg(
                        user_group_role_pg_id, user_id, protection_group_id, role_id,update_date)
                VALUES (csm_user_grou_user_group_r_seq.nextval,
                        (select user_id from csm_user where login_name = '${user.username}'),
                        (select protection_group_id from csm_protection_group where protection_group_name = 'HealthcareSite'),
                        (select role_id from csm_role where role_name = 'data_analyst'),SYSDATE);

        </sql>

	</target>
	
	<target name="install_cert">
		<echo message="${webSSO.server.address}"/>  
		<echo message="${webSSO.server.port}"/>  
		<echo message="${truststore.passphrase}"/>
		<echo message="${modified.trust.store}"/>
		
		<java classname="gov.nih.nci.caaersinstaller.util.InstallCert">
          	<arg value="${webSSO.server.address}"/>
		  	<arg value="${webSSO.server.port}"/>
			<arg value="${truststore.passphrase}"/>
			<arg value="${modified.trust.store}/"/>
			<classpath refid="customlib.cp"/>
       </java>
	</target>
	
	<target name="copy_csm_jass_config">
		<java classname="gov.nih.nci.caaersinstaller.util.CsmJaasFileCopier">
          	<arg value="${basedir}/resources/templates/conf/${database.vendor}.csm_jaas.config"/>
		  	<arg value="${tomcat.temp.home}/conf/cabig/csm_jaas.config"/>
		 <classpath refid="customlib.cp"/>	
       </java>
	</target>
	
	<target name="cleanuptarget" description="clean up">

	</target>
	<target name="finished" description="clean up">
		<delete dir="${temp.dir}" includeemptydirs="true"  failonerror="false" />
		<echo message="System set up is complete " />
	</target>
</project>
