<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright SemanticBits, Northwestern University and Akaza Research
  
  Distributed under the OSI-approved BSD 3-Clause License.
  See http://ncip.github.com/caaers/LICENSE.txt for details.
-->
<package name="gov.nih.nci.cabig.caaers.rules.reporting_pre_existing_condition_section"
         xmlns="http://drools.org/drools-4.0" xmlns:drools="http://drools.org/drools-4.0"
         xmlns:rules="http://drools.org/drools-4.0"
         xmlns:xs="http://www.w3.org/2001/XMLSchema-instance"
         xs:schemaLocation="http://drools.org/drools-4.0 drools-4.0.xsd">

    <import name="gov.nih.nci.cabig.caaers.domain.*"/>
    <import name="gov.nih.nci.cabig.caaers.validation.*"/>
    <import name="java.util.List"/>
    <import name="com.semanticbits.rules.objectgraph.NullSafeFieldExtractor"/>
    <import name="com.semanticbits.rules.utils.NumberUtil"/>
    <import name="gov.nih.nci.cabig.caaers.rules.runtime.ExpeditedAdverseEventValidator"/>
    <import name="com.semanticbits.rules.utils.DateUtil"/>
    <import name="org.apache.commons.lang.StringUtils"/>


    <!-- ==========================================================================
   RuleName : PEC_BR1_CHK
   Logic : 'Pre-Existing Condition'  must not be provided if 'Other Pre-Existing Condition' is provided and vice-versa
   Error Code : PEC_BR1_ERR
   Error Message : Either and only CONDITION_NAME or OTHER_CONDITION_NAME must be provided
   ============================================================================= -->
    <rule name="PEC_BR1_CHK">
        <lhs>
            <pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
            <pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
            <eval>new ExpeditedAdverseEventValidator() {
                public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
                    int i = 0;
                    for(SAEReportPreExistingCondition pc : aeReport.getSaeReportPreExistingConditions()){
                            if( StringUtils.isNotEmpty(pc.getOther()) &amp;&amp; pc.getPreExistingCondition() != null){
                                errors.addValidationError("PEC_BR1_ERR", "Either and only 'Pre-existing condition' or
                                'Other(pre-existing)' must be provided", i).addFieldNames("aeReport.saeReportPreExistingConditions[" + i + "].preExistingCondition", "aeReport.saeReportPreExistingConditions[" + i + "].other");
                            }
                        i++;
                    }
                    return errors.hasErrors() ? FAIL : SUCCESS;
                }
                }.validate(aeReport, errors)
            </eval>
        </lhs>
        <rhs>
            <!-- Already Populated Error Message-->
        </rhs>
    </rule>
    
      <!-- ==========================================================================
    RuleName : PEC_BR2_CHK
    Rule : Report cannot refer to retired PreExisting Condition
    Error Code : PEC_BR2_ERR
    Error Message : PreExisting Condition is incorrect and is removed from protocol 
    ============================================================================= -->
    <rule name="PEC_BR2_CHK">
        <lhs>
            <pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
            <pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
            <eval>new ExpeditedAdverseEventValidator() {
               public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
                   int i = 0;
                   for(SAEReportPreExistingCondition reportCondition : aeReport.getSaeReportPreExistingConditions()) {
                        if (reportCondition != null &amp;&amp; reportCondition.getPreExistingCondition() != null  &amp;&amp; reportCondition.getPreExistingCondition().isRetired()) {
                            errors.addValidationError("PEC_BR2_ERR", "PreExisting Condition is incorrect and is removed from protocol").addFieldNames("aeReport.saeReportPreExistingConditions[" + i + "].preExistingCondition");
                        }
                      i++;
                   }
                   return errors.hasErrors() ? FAIL : SUCCESS;
                }
           }.validate(aeReport, errors)</eval>
        </lhs>
        <rhs>
            <!--  Error message is already populated -->
        </rhs>
    </rule>
    
</package>
