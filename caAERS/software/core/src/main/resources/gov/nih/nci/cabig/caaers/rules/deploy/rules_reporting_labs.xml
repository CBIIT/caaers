<?xml version="1.0" encoding="UTF-8"?>
<package  name="gov.nih.nci.cabig.caaers.rules.reporting_labs_section"  xmlns="http://drools.org/drools-4.0" xmlns:drools="http://drools.org/drools-4.0" xmlns:rules="http://drools.org/drools-4.0" 
	xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:schemaLocation="http://drools.org/drools-4.0 drools-4.0.xsd">

	<import name="gov.nih.nci.cabig.caaers.domain.*"/>
	<import name="gov.nih.nci.cabig.caaers.validation.*" />
	<import name="java.util.HashSet" />
	<import name="com.semanticbits.rules.objectgraph.NullSafeFieldExtractor" />
	<import name="com.semanticbits.rules.utils.NumberUtil" />
	<import name="gov.nih.nci.cabig.caaers.rules.runtime.ExpeditedAdverseEventValidator" />
	<import name="com.semanticbits.rules.utils.DateUtil" />
	
	<global type="com.semanticbits.rules.impl.RuleContext" identifier="ruleContext"/>
	<global type="com.semanticbits.rules.runtime.action.ActionDispatcher" identifier="actionDispatcher"/>
	
	<!-- ==========================================================================
	RuleName : LAB_BR1_CHK
	Logic :'Lab Category' and 'Lab' must not be provided if 'Other Lab'  is provided and vice versa
	Error Code : LAB_BR1_ERR
	Error Message : Either and only LAB_CATEGORY and LAB_NAME or OTHER_LAB must be provided.
	============================================================================= -->
	<rule name="LAB_BR1_CHK">
		<lhs>
			<pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
			<pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
			<eval>new ExpeditedAdverseEventValidator() {
				public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
					int i = 0;
					for(Lab l : aeReport.getLabs()){
						if (( l.getLabTerm() != null &amp;&amp; (l.getName() != null || l.getLabTerm().getCategory() !=null)) &amp;&amp; l.getOther() != null){
							errors.addValidationError("LAB_BR1_ERR", "'Lab test name' and 'Lab category' must not be provided if 'Other'  is provided and vice versa", i).addFieldNames("aeReport.labs[" + i + "].lab-category", "aeReport.labs[" + i + "].labName", "aeReport.labs[" + i + "].other");
						}
                        i++;
					}
					return errors.hasErrors() ? FAIL : SUCCESS;
				}
	    	}.validate(aeReport, errors)</eval>
		</lhs>
		<rhs>
			<!-- Already Populated Error Message-->
       	</rhs>
	</rule>
	<!-- ==========================================================================
	RuleName : LAB_BR2A_CHK
	Logic : “Baseline”, “Nadir/Worst”, “Recovery” or “Latest” fields must not be provided if “Lab Category” is ‘Microbiology’.
	Error Code : LAB_BR2A_ERR
	Error Message : "BASELINE_DATE,  BASELINE_VALUE, BASELINE_UOM, WORST_DATE, WORST_VALUE, WORST_UOM, RECOVERY_LATEST_DATE, RECOVERY_LATEST_VALUE and RECOVERY_LATEST_UOM must not be provided if LAB_CATEGORY is ""Microbiology"".
	============================================================================= -->
	<rule name="LAB_BR2A_CHK">
		<lhs>
			<pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
			<pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
			<eval>new ExpeditedAdverseEventValidator() {
			
				private boolean isLabValueEmpty(LabValue lv){
					if(lv == null) return true;
					return (lv.getValue() == null) &amp;&amp; (lv.getDate() == null);
				}
				
				public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
					int i = 0;
					for(Lab l : aeReport.getLabs()){
						if(NullSafeFieldExtractor.extractField(l, "labTerm.category.name").equals("Microbiology")){
							if( !(isLabValueEmpty(l.getBaseline()) &amp;&amp; 
							  isLabValueEmpty(l.getNadir()) &amp;&amp; 
							  isLabValueEmpty(l.getRecovery()) ) ){
								errors.addValidationError("LAB_BR2A_ERR", "'Baseline' , 'Worst' and 'Recovery' values must not be provided when Lab category is 'Microbiology'" , i).addFieldNames("aeReport.labs[" + i + "].baseline", "aeReport.labs[" + i + "].nadir", "aeReport.labs[" + i + "].recovery", "aeReport.labs[" + i + "].lab-category");
							}
						}
                        i++;
					}
					return errors.hasErrors() ? FAIL : SUCCESS;
				}
	    	}.validate(aeReport, errors)</eval>
		</lhs>
		<rhs>
			<!-- Already Populated Error Message-->
       	</rhs>
	</rule>
	
	<!-- ==========================================================================
	RuleName : LAB_BR2B_CHK
	Logic : “Baseline”, “Nadir/Worst”, “Recovery” or “Latest” fields must  be provided if “Lab Category” is not ‘Microbiology’.
	Error Code : LAB_BR2B_ERR
	Error Message : "Baseline value," "Worst value," and "Recovery values" must be provided when the "Lab category" has the following values:
				         "Bone marrow biopsy," "Chemistry," "Coagulation," "Hematologic," and "Respiratory."
	============================================================================= -->
	<rule name="LAB_BR2B_CHK">
		<lhs>
			<pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
			<pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
			<eval>new ExpeditedAdverseEventValidator() {
			
				private boolean isLabValueEmpty(LabValue lv){
					if(lv == null) return true;
					return (lv.getValue() == null) &amp;&amp; (lv.getDate() == null);
				}
				
				public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
					int i = 0;
					for(Lab l : aeReport.getLabs()){
						if(!NullSafeFieldExtractor.extractField(l, "labTerm.category.name").equals("null")){
							if(!NullSafeFieldExtractor.extractField(l, "labTerm.category.name").equals("Microbiology")){
								if(isLabValueEmpty(l.getBaseline()) || isLabValueEmpty(l.getNadir()) || isLabValueEmpty(l.getRecovery()) ){
									errors.addValidationError("LAB_BR2B_ERR", "'Baseline' , 'Worst' and 'Recovery' values must be provided when Lab category is not 'Microbiology'" , i).addFieldNames("aeReport.labs[" + i + "].baseline", "aeReport.labs[" + i + "].nadir", "aeReport.labs[" + i + "].recovery", "aeReport.labs[" + i + "].lab-category");
								}
							}
						}
						
                        i++;
					}
					return errors.hasErrors() ? FAIL : SUCCESS;
				}
	    	}.validate(aeReport, errors)</eval>
		</lhs>
		<rhs>
			<!-- Already Populated Error Message-->
       	</rhs>
	</rule>
	
	<!-- ==========================================================================
	RuleName : LAB_BR3_CHK
	Logic :“Baseline Date” must not be greater “Nadir/Worst Date”."
	Error Code : LAB_BR3_ERR
	Error Message : BASELINE_DATE must not be greater WORST_DATE.
	============================================================================= -->
	<rule name="LAB_BR3_CHK">
		<lhs>
			<pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
			<pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
			<eval>new ExpeditedAdverseEventValidator() {
				public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
					int i = 0;
					for(Lab l : aeReport.getLabs()){
						if(l.getBaseline().getDate() == null  || l.getNadir().getDate() == null) continue;
						if(DateUtil.compare(l.getBaseline().getDate() ,l.getNadir().getDate()) &lt; 0){
							errors.addValidationError("LAB_BR3_ERR", " 'Baseline value(Date)' must not be greater than 'Worst value(Date)'.", i).addFieldNames("aeReport.labs[" + i + "].baseline", "aeReport.labs[" + i + "].nadir");
						}
					}
                    i++;
					return errors.hasErrors() ? FAIL : SUCCESS;
				}
	    	}.validate(aeReport, errors)</eval>
		</lhs>
		<rhs>
			<!-- Already Populated Error Message-->
       	</rhs>
	</rule>
	
	<!-- ==========================================================================
	RuleName : LAB_BR4_CHK
	Logic :"“Nadir/Worst Date” must not be greater than “Recovery Date”.
	Error Code : LAB_BR4_ERR
	Error Message :WORST_DATE must not be greater than RECOVERY_LAST_DATE
	============================================================================= -->
	<rule name="LAB_BR4_CHK">
		<lhs>
			<pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
			<pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
			<eval>new ExpeditedAdverseEventValidator() {
				public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
					int i = 0;
					for(Lab l : aeReport.getLabs()){
						if(l.getRecovery().getDate() == null  || l.getNadir().getDate() == null) continue;
						if(DateUtil.compare(l.getNadir().getDate(),l.getRecovery().getDate()) &lt; 0){
							errors.addValidationError("LAB_BR4_ERR", "'Worst value(Date)' must not be greater than 'Recovery value(Date)'.", i).addFieldNames("aeReport.labs[" + i + "].nadir", "aeReport.labs[" + i + "].recovery");
						}
					}
                    i++;
					return errors.hasErrors() ? FAIL : SUCCESS;
				}
	    	}.validate(aeReport, errors)</eval>
		</lhs>
		<rhs>
			<!-- Already Populated Error Message-->
       	</rhs>
	</rule>
	<!-- ==========================================================================
	RuleName : LAB_BR5A_CHK
	Logic :" “Site”,“Date” & “Infectious Agent” must be provided if “Lab Category” is ‘Microbiology’.
	Error Code : LAB_BR5A_ERR
	Error Message : "MICROBIOLOGY_SITE, MICROBIOLOGY_DATE AND MICROBIOLOGY_INF_AGENT must be provided if LAB_CATEGORY is ""Microbiology"
	============================================================================= -->
	<rule name="LAB_BR5A_CHK">
		<lhs>
			<pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
			<pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
			<eval>new ExpeditedAdverseEventValidator() {
			
				public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
					int i = 0;
					for(Lab l : aeReport.getLabs()){
						if(NullSafeFieldExtractor.extractField(l, "labTerm.category.name").equals("Microbiology")){
							if(l.getSite() == null || l.getInfectiousAgent() == null || l.getLabDate() == null){
                                errors.addValidationError("LAB_BR5A_ERR", "'Site','Date' and 'Infectious Agent' must be provided if 'Lab Category' is 'Microbiology'", i).addFieldNames("aeReport.labs[" + i +"].site", "aeReport.labs[" + i +"].labDate", "aeReport.labs[" + i +"].infectiousAgent", "aeReport.labs[" + i +"].lab-category");
                            }
						}
					}
                    i++;
					return errors.hasErrors() ? FAIL : SUCCESS;
				}
	    	}.validate(aeReport, errors)</eval>
		</lhs>
		<rhs>
			<!-- Already Populated Error Message-->
       	</rhs>
	</rule>
	
	<!-- ==========================================================================
	RuleName : LAB_BR5B_CHK
	Logic :" “Site”,“Date” & “Infectious Agent” must not be provided if “Lab Category” is  not ‘Microbiology’.
	Error Code : LAB_BR5B_ERR
	Error Message : "MICROBIOLOGY_SITE, MICROBIOLOGY_DATE AND MICROBIOLOGY_INF_AGENT must not be provided if LAB_CATEGORY is not "Microbiology"
	============================================================================= -->
	<rule name="LAB_BR5B_CHK">
		<lhs>
			<pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
			<pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
			<eval>new ExpeditedAdverseEventValidator() {
			
				public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
					int i = 0;
					String labCategoryName = NullSafeFieldExtractor.extractField(l, "labTerm.category.name");
					for(Lab l : aeReport.getLabs()){
						if(labCategoryName.equals("Bone Marrow Biopsy") || labCategoryName.equals("Chemistry") || labCategoryName.equals("Coagulation") || labCategoryName.equals("Hematologic") ||  labCategoryName.equals("Respiratory")){
							if(l.getSite() != null || l.getInfectiousAgent() != null || l.getLabDate() != null){
								errors.addValidationError("LAB_BR5B_ERR", "'Site','Date' and 'Infectious Agent' must not be provided if 'Lab Category' is not 'Microbiology'", i).addFieldNames("aeReport.labs[" + i +"].site", "aeReport.labs[" + i +"].labDate", "aeReport.labs[" + i +"].infectiousAgent", "aeReport.labs[" + i +"].lab-category");
							}
						}
					}
                    i++;
					return errors.hasErrors() ? FAIL : SUCCESS;
				}
	    	}.validate(aeReport, errors)</eval>
		</lhs>
		<rhs>
			<!-- Already Populated Error Message-->
       	</rhs>
	</rule>
	<!-- ==========================================================================
	RuleName : LAB_UK_CHK
	Logic :Lab Results must be unique
	Error Code : LAB_UK_ERR
	Error Message :Lab Results must be unique
	============================================================================= -->
	<rule name="LAB_UK_CHK">
		<lhs>
			<pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
			<pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
			<eval>new ExpeditedAdverseEventValidator() {
				public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
					int i = 0;
					HashSet hSet = new HashSet();
					for(Lab l : aeReport.getLabs()){
						if(!hSet.add(l)){
							errors.addValidationError("LAB_UK_ERR","Lab Results must be unique", i, ( (l.getOther() == null) ? l.getName() : l.getOther()));
						}
                    i++;
					}
					return errors.hasErrors() ? FAIL : SUCCESS;
				}
	    	}.validate(aeReport, errors)</eval>
		</lhs>
		<rhs>
			<!-- Already Populated Error Message-->
       	</rhs>
	</rule>
	</package>
