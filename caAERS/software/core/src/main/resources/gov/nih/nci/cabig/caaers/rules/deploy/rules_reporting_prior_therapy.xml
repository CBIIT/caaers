<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright SemanticBits, Northwestern University and Akaza Research
  
  Distributed under the OSI-approved BSD 3-Clause License.
  See http://ncip.github.com/caaers/LICENSE.txt for details.
-->
<package name="gov.nih.nci.cabig.caaers.rules.reporting_prior_therapies_section" xmlns="http://drools.org/drools-4.0"
         xmlns:drools="http://drools.org/drools-4.0" xmlns:rules="http://drools.org/drools-4.0"
         xmlns:xs="http://www.w3.org/2001/XMLSchema-instance"
         xs:schemaLocation="http://drools.org/drools-4.0 drools-4.0.xsd">

    <import name="gov.nih.nci.cabig.caaers.domain.*"/>
    <import name="gov.nih.nci.cabig.caaers.validation.*"/>
    <import name="org.apache.commons.lang.StringUtils"/>
    <import name="org.apache.commons.lang.ArrayUtils"/>
    <import name="java.util.HashSet"/>
    <import name="com.semanticbits.rules.utils.DateUtil"/>
    <import name="com.semanticbits.rules.objectgraph.NullSafeFieldExtractor"/>
    <import name="gov.nih.nci.cabig.caaers.rules.runtime.ExpeditedAdverseEventValidator"/>


    <!-- ==========================================================================
   RuleName : PTY_BR1_CHK
   Logic : "Comments"" (to capture Prior Therapy) must be provided if ""Prior therapy"" is ‘Prior Therapy NOS'
   Error Code : PTY_BR1_ERR
   Error Message : COMMENTS must be provided (including appropriate Prior Therapy) if PRIOR_THERAPY is "Prior Therapy NOS"
   ============================================================================= -->
    <rule name="PTY_BR1_CHK">
        <lhs>
            <pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
            <pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
            <eval>new ExpeditedAdverseEventValidator() {
                public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
                    int i = 0;
                    if(!aeReport.getStudy().hasCtepEsysIdentifier()) return SUCCESS;
                    for(SAEReportPriorTherapy pt : aeReport.getSaeReportPriorTherapies()) {
                            if(StringUtils.equalsIgnoreCase("Prior Therapy NOS", pt.getName()) &amp;&amp; pt.getOther() == null ) {
                                errors.addValidationError("PTY_BR1_ERR","Comments (prior therapy) must be provided if 'Prior therapy' is
                                'Prior Therapy NOS'", i).addFieldNames("aeReport.saeReportPriorTherapies[" + i + "].other");
                            }
                            i++;
                    }
                return errors.hasErrors() ? FAIL : SUCCESS;
                }
                }.validate(aeReport, errors)
            </eval>
        </lhs>
        <rhs>
            <!-- Populate Error Message-->

        </rhs>
    </rule>


    <!-- ==========================================================================
     RuleName : PTY_BR3_CHK
     Logic :  “Therapy End Date” must not be provided if “Therapy Start Date” is not provided
     Error Code : PTY_BR3_ERR
     Error Message : THERAPY_END_DATE must be not be provided if THERAPY_START_DATE is not provided.
     ============================================================================= -->
    <rule name="PTY_BR3_CHK">
        <lhs>
            <pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
            <pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
            <eval>new ExpeditedAdverseEventValidator() {

                public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
                int i = 0;
                if(!aeReport.getStudy().hasCtepEsysIdentifier()) return SUCCESS;
                for(SAEReportPriorTherapy pt : aeReport.getSaeReportPriorTherapies()){
                    if(pt.getStartDate().getYear() == null &amp;&amp; pt.getEndDate().getYear() != null){
                        errors.addValidationError("PTY_BR3_ERR","'Therapy End Date' must not be provided if 'Therapy Start Date'
                        is not provided", i).addFieldNames("aeReport.saeReportPriorTherapies[" + i + "].endDate", "aeReport.saeReportPriorTherapies[" + i + "].startDate");
                    }
                    i++;
                }
                return errors.hasErrors() ? FAIL : SUCCESS;
                }
                }.validate(aeReport, errors)
            </eval>
        </lhs>
        <rhs>
            <!-- Populate Error Message-->

        </rhs>
    </rule>

    <!-- ==========================================================================
     RuleName : PTY_BR2_CHK  (Generic)
     Logic :  'Therapy End Date' must not be later than 'Therapy Start Date'
     Error Code : PTY_BR2_ERR
     Error Message : THERAPY_END_DATE must be later than or equal THERAPY_START_DATE
     ============================================================================= -->
    <rule name="PTY_BR2_CHK">
        <lhs>
            <pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
            <pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
            <eval>new ExpeditedAdverseEventValidator() {

                public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
                int i = 0;
                for(SAEReportPriorTherapy pt : aeReport.getSaeReportPriorTherapies()){
                    if(pt.getEndDate() != null &amp;&amp;!pt.getEndDate().isNull() &amp;&amp;
                    pt.getStartDate().compareTo(pt.getEndDate()) &gt; 0){
                        errors.addValidationError("PTY_BR2_ERR","'Therapy End Date' must not be later than 'Therapy Start Date'", i).addFieldNames("aeReport.saeReportPriorTherapies[" + i + "].endDate", "aeReport.saeReportPriorTherapies[" + i + "].startDate");;
                    }
                    i++;
                }
                return errors.hasErrors() ? FAIL : SUCCESS;
                }
                }.validate(aeReport, errors)
            </eval>
        </lhs>
        <rhs>
            <!-- Populate Error Message-->

        </rhs>
    </rule>


    <!-- ==========================================================================
	 BJ : MODIFIED : CAAERS-2267
     RuleName : PTY_BR4B_CHK
     Logic : ‘Prior Therapy Agents’ must not be provided if "Prior_Therapy" is
             ‘No Prior Therapy’
             ‘Surgery’
             ‘Radiation’
     Error Code : PTY_BR4B_ERR
     Error Message : CHEMO_AGENTS must not be provided for the provided PRIOR_THERAPY value.
     ============================================================================= -->
    <rule name="PTY_BR4B_CHK">
        <lhs>
            <pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
            <pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
            <eval>new ExpeditedAdverseEventValidator() {
                public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
		                int i = 0;
                        if(!aeReport.getStudy().hasCtepEsysIdentifier()) return SUCCESS;
		                for(SAEReportPriorTherapy pt : aeReport.getSaeReportPriorTherapies()){
		                	i++;
		                	if(!(NullSafeFieldExtractor.extractField(pt, "priorTherapy.id") instanceof Integer)) continue;
		                	if(ArrayUtils.contains(new int[] {13,16,17},NullSafeFieldExtractor.extractIntegerField(pt, "priorTherapy.id"))) {
		                		if(pt.getPriorTherapyAgents().size() &gt; 0) {
		                			errors.addValidationError("PTY_BR4B_ERR", 
									"'Prior Therapy Agents' must not be provided if 'Prior_Therapy' is 'No prior therapy', 'Surgery' ,'Radiation therapy'",
									 i).addFieldNames("aeReport.saeReportPriorTherapies[" + i + "]",
									 	"aeReport.saeReportPriorTherapies[" + i + "].priorTherapyAgents",
										"aeReport.saeReportPriorTherapies[" + i + "].priorTherapyAgents[0].agent",
										"aeReport.saeReportPriorTherapies[" + i + "].priorTherapyAgents[0].agent.displayName");
		                		}
		               	   }
		                }
		                return errors.hasErrors() ? FAIL : SUCCESS;
                }
                }.validate(aeReport, errors)
            </eval>
        </lhs>
        <rhs>
          

        </rhs>
    </rule>
    <!-- ==========================================================================
     RuleName : PTY_UK_CHK
     Logic : Prior Therapy must be unique
     Error Code : PTY_UK_ERR
     Error Message : PRIOR_THERAPY must be unique
     ============================================================================= -->
    <rule name="PTY_UK_CHK">
        <lhs>
            <pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
            <pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
            <eval>new ExpeditedAdverseEventValidator() {

                        public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
                            int i = 0;
                            if(!aeReport.getStudy().hasCtepEsysIdentifier()) return SUCCESS;
                            HashSet hSet = new HashSet();
                            for (SAEReportPriorTherapy pt : aeReport.getSaeReportPriorTherapies()) {
                                StringBuffer ptUnique = new StringBuffer();
                                ptUnique.append(pt.getName()).append(pt.getStartDate().getYear()).append(pt.getStartDate().getMonth());
                                i++;
                                if(!hSet.add(ptUnique.toString())) {
                                    errors.addValidationError("PTY_UK_ERR","Two identical prior therapies cannot share the same starting month and year", i);
                                }
                            }
                            return errors.hasErrors() ? FAIL : SUCCESS;
                        }
                
                }.validate(aeReport, errors)
            </eval>
        </lhs>
        <rhs>
            <!-- Already Populated Error Message-->

        </rhs>
    </rule>

    <!-- ==========================================================================
     RuleName : PTA_UK_CHK
     Logic : Prior Therapy Agents must be unique
     Error Code : PTA_UK_ERR
     Error Message : AGENT_NAME must be unique
     ============================================================================= -->
    <rule name="PTA_UK_CHK">
        <lhs>
            <pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
            <pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
            <eval>new ExpeditedAdverseEventValidator() {
                public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
                    int i = 0;
                    if(!aeReport.getStudy().hasCtepEsysIdentifier()) return SUCCESS;
                    for (SAEReportPriorTherapy aet : aeReport.getSaeReportPriorTherapies()) {
                        HashSet hSet = new HashSet();
                        i++;
                        if(aet.getPriorTherapyAgents() == null) continue;
                        for(PriorTherapyAgent pta : aet.getPriorTherapyAgents()) {
                            if (!hSet.add(String.valueOf(pta.getName()))) {
                                errors.addValidationError("PTA_UK_ERR", "Agents within a single prior therapy must be unique", i);
                            }
                        }
                    }
                    return errors.hasErrors() ? FAIL : SUCCESS;
                }
                }.validate(aeReport, errors)
            </eval>
        </lhs>
        <rhs>
            <!-- Already Populated Error Message-->

        </rhs>
    </rule>
    
      <!-- ==========================================================================
    RuleName : PTY_BR6_CHK
    Rule : Report cannot refer to retired Prior Therapy
    Error Code : PTY_BR6_ERR
    Error Message : Prior Therapy is incorrect and is removed from protocol 
    ============================================================================= -->
    <rule name="PTY_BR6_CHK">
        <lhs>
            <pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
            <pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
            <eval>new ExpeditedAdverseEventValidator() {
               public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
                   int i = 0;
                   if(!aeReport.getStudy().hasCtepEsysIdentifier()) return SUCCESS;
                   for(SAEReportPriorTherapy reportTherapy : aeReport.getSaeReportPriorTherapies()) {
                         if (reportTherapy != null &amp;&amp; reportTherapy.getPriorTherapy() != null  &amp;&amp; reportTherapy.getPriorTherapy().isRetired()) {
                            errors.addValidationError("PTY_BR6_ERR", "Prior Therapy is incorrect and is removed from protocol").addFieldNames("aeReport.saeReportPriorTherapies[" + i + "].priorTherapy");
                        }
                      i++;
                   }
                   return errors.hasErrors() ? FAIL : SUCCESS;
                }
           }.validate(aeReport, errors)</eval>
        </lhs>
        <rhs>
            <!--  Error message is already populated -->
        </rhs>
    </rule>

</package>
