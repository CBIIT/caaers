<?xml version="1.0" encoding="UTF-8"?>
<package  name="gov.nih.nci.cabig.caaers.rules.reporting_study_interventions"  xmlns="http://drools.org/drools-4.0" xmlns:drools="http://drools.org/drools-4.0" xmlns:rules="http://drools.org/drools-4.0" 
	xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:schemaLocation="http://drools.org/drools-4.0 drools-4.0.xsd">

    <import name="java.util.List"/>
    <import name="java.util.HashSet"/>
    <import name="com.semanticbits.rules.utils.DateUtil"/>
    <import name="com.semanticbits.rules.utils.NumberUtil"/>
    <import name="org.apache.commons.lang.StringUtils"/>

    <import name="gov.nih.nci.cabig.caaers.domain.*"/>
	<import name="gov.nih.nci.cabig.caaers.validation.*" />
	<import name="com.semanticbits.rules.objectgraph.NullSafeFieldExtractor" />
	<import name="gov.nih.nci.cabig.caaers.rules.runtime.ExpeditedAdverseEventValidator" />
	
	<global type="com.semanticbits.rules.impl.RuleContext" identifier="ruleContext"/>
	<global type="com.semanticbits.rules.runtime.action.ActionDispatcher" identifier="actionDispatcher"/>
	

    <!-- ==========================================================================
	RuleName : SEC_BR50_CHK
	Rule : Surgery intervention must not be provided for non SURGERY pathways
	Error Code : SEC_BR50_ERR
	Error Message : Surgery intervention must not be provided since the study you selected does not involve a SURGERY
	============================================================================= -->
	<rule name="SEC_BR50_CHK">
		<lhs>
			<pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
			<pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
			<eval>!aeReport.getStudy().hasTherapyOfType(StudyTherapyType.SURGERY)</eval>
			<eval>aeReport.getSurgeryInterventions().size() &gt; 0</eval>	
		</lhs>
		<rhs>
			<!-- Populate Error Message-->
			errors.addValidationError("SEC_BR50_ERR","Surgery intervention must not be provided since the study you selected does not involve a SURGERY");
       	</rhs>
	</rule>	
	<!-- ==========================================================================
	RuleName : SEC_BR51_CHK
	Rule : Radiation intervention must not be provided for non RADIATION pathways
	Error Code : SEC_BR51_ERR
	Error Message : Radiation intervention must not be provided must not be provided since the study you selected does not involve RADIATION therapy.
	============================================================================= -->
	<rule name="SEC_BR51_CHK">
		<lhs>
			<pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
			<pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
			<eval>!aeReport.getStudy().hasTherapyOfType(StudyTherapyType.RADIATION)</eval>
			<eval>aeReport.getRadiationInterventions().size() &gt; 0</eval>	
		</lhs>
		<rhs>
			<!-- Populate Error Message-->
			errors.addValidationError("SEC_BR51_ERR","Radiation intervention must not be provided since the study you selected does not involve a RADIATION");
       	</rhs>
	</rule>		

	<!-- ==========================================================================
	RuleName : SEC_BR53_CHK
	Rule : Medical Device information must not be provided for non DEVICE pathways 
	Error Code : SEC_BR53_ERR
	Error Message : Medical Device information must not be provided for must not be provided since the study you selected does not involve a DEVICE. 
	============================================================================= -->
	<rule name="SEC_BR53_CHK">
		<lhs>
			<pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
			<pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
			<eval>!aeReport.getStudy().hasTherapyOfType(StudyTherapyType.DEVICE)</eval>
			<eval>aeReport.getMedicalDevices().size() &gt; 0</eval>	
		</lhs>
		<rhs>
			<!-- Populate Error Message-->
			errors.addValidationError("SEC_BR53_ERR","Medical Device information must not be provided since the study you selected does not involve a DEVICE");
       	</rhs>
	</rule>

    <!-- ==========================================================================
        RuleName : PAG_UK_CHK
        Rule : Protocol Agents must be unique"
        Error Code : PAG_UK_ERR
        Error Message : PROTOCOL_AGENT must be unique
        ============================================================================= -->
        <rule name="PAG_UK_CHK">
            <lhs>
                <pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
                <pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
                <eval>new ExpeditedAdverseEventValidator(){ 
                	public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
                    	TreatmentInformation ti = aeReport.getTreatmentInformation(); 
                    	if(ti == null) return SUCCESS; 
                    	if(ti.getCourseAgents() == null) return SUCCESS; 
                    	int i = 0; 
                    	HashSet hSet = new HashSet(); 
                    	for(CourseAgent ca : ti.getCourseAgents()){ 
                    		i++;
                    		if(ca.getStudyAgent() == null) continue;
                    		
                    		if(!hSet.add(ca.getStudyAgent().getId())){ 
                    			errors.addValidationError("PAG_UK_ERR", "Protocol Agents must be unique", 
                    					i,ca.getStudyAgent().getAgentName() ); 
                    		} 
                    	} 
                    	return errors.hasErrors() ? FAIL : SUCCESS; 
                    } 
                }.validate(aeReport, errors)
               </eval>
            </lhs>
            <rhs>
                <!--  Error message is already populated -->
            </rhs>
        </rule>

    <!-- ==========================================================================
    RuleName : PAG_BR3_CHK
    Rule : 'Date Last Administered' must be provided for an investigational agent."
    Error Code : PAG_BR3_ERR
    Error Message : LAST_ADMINISTERED_DATE must be entered for an investigational agent.
    ============================================================================= -->
    <rule name="PAG_BR3_CHK">
        <lhs>
            <pattern identifier="aeReport"
                object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
            <pattern identifier="errors"
                object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
            <eval>new ExpeditedAdverseEventValidator(){
                public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
                    TreatmentInformation ti = aeReport.getTreatmentInformation();
                    if(ti == null) return SUCCESS;
                    if(ti.getCourseAgents() == null) return SUCCESS;

                int i = 0;
                for(CourseAgent ca : ti.getCourseAgents()) {
                    if(ca.getStudyAgent() == null) continue;
                    if(ca.getStudyAgent().getInvestigationalNewDrugIndicator() &amp;&amp; ca.getLastAdministeredDate() == null) {
                     errors.addValidationError("PAG_BR3_ERR", "'Date Last Administered' must be provided for an investigational agent.",i).addFieldNames("aeReport.treatmentInformation.courseAgents[" + i + "].lastAdministeredDate"); }
                    i++;
                }
                return errors.hasErrors() ? FAIL : SUCCESS; } }.validate(aeReport, errors)</eval>
        </lhs>
        <rhs>
            <!--  Error message is already populated -->
        </rhs>
    </rule>

    <!-- ==========================================================================
    RuleName : PAG_BR2B_CHK
    Rule : "'Unit of measure'  must be provided if 'Total dose administered this course' is provided.
    Error Code : PAG_BR2B_ERR
    Error Message : DELAY_UOM must be provided if the Total dose administered this course is provided
    ============================================================================= -->
    <rule name="PAG_BR2B_CHK">
        <lhs>
            <pattern identifier="aeReport"
                object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
            <pattern identifier="errors"
                object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
            <eval>new ExpeditedAdverseEventValidator(){ public boolean
                validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
                TreatmentInformation ti = aeReport.getTreatmentInformation(); if(ti == null) return
                SUCCESS; if(ti.getCourseAgents() == null) return SUCCESS; int i = 0; for(CourseAgent
                ca : ti.getCourseAgents()){  
                if(ca.getStudyAgent() == null) continue;
                if(ca.getDose().getAmount() != null
                &amp;&amp; StringUtils.isEmpty(ca.getDose().getUnits()) ){
                    errors.addValidationError("PAG_BR2B_ERR", "'Unit of measure' must be provided if 'Total dose administered this course' is provided",i).addFieldNames("aeReport.treatmentInformation.courseAgents[" + i + "].dose.units", "aeReport.treatmentInformation.courseAgents[" + i + "].dose.amount");
                     }; i++; } return errors.hasErrors() ? FAIL : SUCCESS;
                } }.validate(aeReport, errors)</eval>
        </lhs>
        <rhs>
            <!--  Error message is already populated -->
        </rhs>
    </rule>

    <!-- ===== REPORT LEVEL RULE ====================================================
    RuleName : SEC_BR5B_CHK
    Rule : Protocol agents must be not be provided if Course Information has not been provided.
    Error Code : SEC_BR5A_ERR
    Error Message : PROTOCOL_AGENTS must not be provided if COURSE_INFOMATION is not provided.
    ============================================================================= -->
    <rule name="SEC_BR5B_CHK">
        <rule-attribute name="no-loop" value="true"/>
        <lhs>
            <pattern identifier="aeReport"
                object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
            <pattern identifier="errors"
                object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
            <eval>NullSafeFieldExtractor.extractField(aeReport,"treatmentInformation.firstCourseDate")
                == null</eval>
            <eval>NullSafeFieldExtractor.extractField(aeReport,"treatmentInformation.adverseEventCourse.date")
                == null</eval>
            <eval>NullSafeFieldExtractor.extractField(aeReport,"treatmentInformation.adverseEventCourse.number")
                == null</eval>
            <eval>NullSafeFieldExtractor.extractField(aeReport,"treatmentInformation.totalCourses")
                == null</eval>
            <eval>NullSafeFieldExtractor.extractFieldLength(aeReport,"treatmentInformation.courseAgents")
                &gt; 0</eval>
        </lhs>
        <rhs>
            <!-- Populate Error Message--> errors.addValidationError("SEC_BR5B_ERR","'Protocol
            agents' must be not be provided if 'Course Information' has not been provided"); </rhs>
    </rule>
    
    <!-- ==========================================================================
    RuleName : PAG_BR4_CHK
    Rule : 'Was an investigational agent administered on this protocol?' must be 'Yes' if one of the Agents is Investigational Agent.
    Error Code : PAG_BR4_ERR
    ============================================================================= -->
    <rule name="PAG_BR4_CHK">
        <lhs>
            <pattern identifier="aeReport"
                object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
            <pattern identifier="errors"
                object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
            <eval>new ExpeditedAdverseEventValidator(){
                public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
                    TreatmentInformation ti = aeReport.getTreatmentInformation();
                    if(ti == null) return SUCCESS;
                    if(ti.getCourseAgents() == null) return SUCCESS;

                int i = 0;
                for(CourseAgent ca : ti.getCourseAgents()) {
                    if(ca.getStudyAgent() == null ) continue;
                    if(ti.getInvestigationalAgentAdministered() == null ) break;
                    if(ca.getStudyAgent().getInvestigationalNewDrugIndicator() &amp;&amp; !ti.getInvestigationalAgentAdministered()) { 
                    	errors.addValidationError("PAG_BR4_ERR", "'Was an investigational agent administered on this protocol?' must be 'Yes' if one of the Agents is Investigational Agent.",i).addFieldNames("aeReport.treatmentInformation.investigationalAgentAdministered"); 
                    	break;
                    }
                    i++;                    
                }
                return errors.hasErrors() ? FAIL : SUCCESS; } }.validate(aeReport, errors)</eval>
        </lhs>
        <rhs>
            <!--  Error message is already populated -->
        </rhs>
    </rule>
    

    <!-- ==========================================================================
    RuleName : PAG_BR4B_CHK
    Rule : If investigational agent administered = 'YES', then there must be an investigational agent listed
    Error Code : PAG_BR4B_ERR
    ============================================================================= -->
    <rule name="PAG_BR4B_CHK">
        <lhs>
            <pattern identifier="aeReport"
                object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
            <pattern identifier="errors"
                object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
            <eval>new ExpeditedAdverseEventValidator(){
                public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
                    TreatmentInformation ti = aeReport.getTreatmentInformation();
                    if(ti == null) return SUCCESS;
                    int indAgentCount = 0;
                    if(ti.getCourseAgents() == null) {
                    	indAgentCount = 0;
                    } else {
		                 for(CourseAgent ca : ti.getCourseAgents()) {
		                    if(ca.getStudyAgent() == null ) continue;
		                    if(ti.getInvestigationalAgentAdministered() == null ) break;
		                    if (ca.getStudyAgent().getInvestigationalNewDrugIndicator()) {
		                    	indAgentCount++;
		                    }
		                 }                   
                    }
                    if(ti.getInvestigationalAgentAdministered() != null ) {
 	                	if (ti.getInvestigationalAgentAdministered() &amp;&amp; (indAgentCount == 0)) {
	                    	errors.addValidationError("PAG_BR4B_ERR", "If investigational agent administered = 'YES', then there must be an investigational agent listed  ",1).addFieldNames("aeReport.treatmentInformation.investigationalAgentAdministered"); 
	               	    }                   	
                    }

                return errors.hasErrors() ? FAIL : SUCCESS; } }.validate(aeReport, errors)</eval>
        </lhs>
        <rhs>
            <!--  Error message is already populated -->
        </rhs>
    </rule>
        
    <!-- ==========================================================================
    RuleName : PAG_BR5_CHK
    Rule : 'Protocol Agent' must be active."
    Error Code : PAG_BR5_ERR
    Error Message : Agent is incorrect and is removed from protocol.
    ============================================================================= -->
    <rule name="PAG_BR5_CHK">
        <lhs>
            <pattern identifier="aeReport"
                object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
            <pattern identifier="errors"
                object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
            <eval>new ExpeditedAdverseEventValidator(){
                public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
                    TreatmentInformation ti = aeReport.getTreatmentInformation();
                    if(ti == null) return SUCCESS;
                    if(ti.getCourseAgents() == null) return SUCCESS;

                int i = 0;
                for(CourseAgent ca : ti.getCourseAgents()) {
                    if(ca.getStudyAgent() == null ) continue;
                    if(ca.getStudyAgent().isRetired()){
                    	errors.addValidationError("PAG_BR5_ERR",
                    		"Agent is incorrect and is removed from protocol.", i,ca.getStudyAgent().getAgentName()).addFieldNames("aeReport.treatmentInformation.courseAgents[" + i + "].studyAgent");
                    }
                    
                    i++;                    
                }
                return errors.hasErrors() ? FAIL : SUCCESS; } }.validate(aeReport, errors)</eval>
        </lhs>
        <rhs>
            <!--  Error message is already populated -->
        </rhs>
    </rule>

    <!-- ==========================================================================
    RuleName : SME_BR4_CHK
    Rule : "Name of Reprocessor" cannot be given if IS_SINGLE_USE_DEVICE is not YES.
    Error Code : SME_BR4_ERR
    Error Message : Device Reprocessor Name must only be specified when Device is reprocessed.
    ============================================================================= -->
    <rule name="SME_BR4_CHK">
        <lhs>
            <pattern identifier="aeReport"
                object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
            <pattern identifier="errors"
                object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
            <eval>new ExpeditedAdverseEventValidator(){
                public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
                   int i = 0;
                   for(MedicalDevice device : aeReport.getMedicalDevices()){

                      if(device.getReprocessorName() != null){
                        if(device.getDeviceReprocessed() != ReprocessedDevice.YES){
                            errors.addValidationError("SME_BR4_ERR", "Name of device reprocessor must only be specified when Device is reprocessed.").addFieldNames("aeReport.medicalDevices[" + i + "].reprocessorName");
                        }
                      }

                      i++;  
                   }
                   return errors.hasErrors() ? FAIL : SUCCESS;
                }

           }.validate(aeReport, errors)</eval>
        </lhs>
        <rhs>
            <!--  Error message is already populated -->
        </rhs>
    </rule>


    <!-- ==========================================================================
    RuleName : SME_BR5_CHK
    Rule :  "Name of Reprocessor" should be given if IS_SINGLE_USE_DEVICE is "YES".
    Error Code : SME_BR5_ERR
    Error Message : "Name of device reprocessor must be specified when Device is reprocessed.
    ============================================================================= -->
    <rule name="SME_BR5_CHK">
        <lhs>
            <pattern identifier="aeReport"
                object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
            <pattern identifier="errors"
                object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
            <eval>new ExpeditedAdverseEventValidator(){
                public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
                   int i = 0;
                   for(MedicalDevice device : aeReport.getMedicalDevices()){
                      if(device.getDeviceReprocessed() == ReprocessedDevice.YES){
                        if(device.getReprocessorName() == null){
                            errors.addValidationError("SME_BR5_ERR", "Name of device reprocessor must be specified when Device is reprocessed.").addFieldNames("aeReport.medicalDevices[" + i + "].reprocessorName");
                        }
                      }

                      i++;
                   }
                   return errors.hasErrors() ? FAIL : SUCCESS;
                }

           }.validate(aeReport, errors)</eval>
        </lhs>
        <rhs>
            <!--  Error message is already populated -->
        </rhs>
    </rule>


    <!-- ==========================================================================
    RuleName : SME_BR6
    Rule : 'Address of Reprocessor' cannot be given if IS_SINGLE_USE_DEVICE is not 'Yes'.
    Error Code : SME_BR6_ERR
    Error Message : Device re-processor address must only be specified when Device is reprocessed.
    ============================================================================= -->
    <rule name="SME_BR6_CHK">
        <lhs>
            <pattern identifier="aeReport"
                object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
            <pattern identifier="errors"
                object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
            <eval>new ExpeditedAdverseEventValidator(){
                public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
                   int i = 0;
                   for(MedicalDevice device : aeReport.getMedicalDevices()){
                      if(device.getDeviceReprocessed() != ReprocessedDevice.YES){
                        if(device.getReprocessorAddress() != null){
                            errors.addValidationError("SME_BR6_ERR", "Device re-processor address must only be specified when Device is reprocessed.").addFieldNames("aeReport.medicalDevices[" + i + "].reprocessorAddress");
                        }
                      }

                      i++;
                   }
                   return errors.hasErrors() ? FAIL : SUCCESS;
                }

           }.validate(aeReport, errors)</eval>
        </lhs>
        <rhs>
            <!--  Error message is already populated -->
        </rhs>
    </rule>


    <!-- ==========================================================================
    RuleName : SME_BR7_CHK
    Rule : 'Address of Reprocessor' should be given if IS_SINGLE_USE_DEVICE is 'Yes'.
    Error Code : SME_BR7_ERR
    Error Message : Device re-processor address must  be specified when Device is reprocessed.
    ============================================================================= -->
    <rule name="SME_BR7_CHK">
        <lhs>
            <pattern identifier="aeReport"
                object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
            <pattern identifier="errors"
                object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
            <eval>new ExpeditedAdverseEventValidator(){
                public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
                   int i = 0;
                   for(MedicalDevice device : aeReport.getMedicalDevices()) {
                      if(device.getDeviceReprocessed() == ReprocessedDevice.YES){
                        if(device.getReprocessorAddress() == null){
                            errors.addValidationError("SME_BR7_ERR", "Device reprocessor address must be specified when Device is reprocessed.").addFieldNames("aeReport.medicalDevices[" + i + "].reprocessorAddress");
                        }
                      }

                      i++;
                   }
                   return errors.hasErrors() ? FAIL : SUCCESS;
                }

           }.validate(aeReport, errors)</eval>
        </lhs>
        <rhs>
            <!--  Error message is already populated -->
        </rhs>
    </rule>


    <!-- ==========================================================================
    RuleName : SME_BR8_CHK
    Rule : 'Returned Date' cannot be given if DEVICE is not 'Returned'.     
    Error Code : SME_BR8_ERR
    Error Message : 'Returned Date' cannot be given if DEVICE is not 'Returned'.     .
    ============================================================================= -->
    <rule name="SME_BR8_CHK">
        <lhs>
            <pattern identifier="aeReport"
                object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
            <pattern identifier="errors"
                object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
            <eval>new ExpeditedAdverseEventValidator(){
                public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
                   int i = 0;
                   for(MedicalDevice device : aeReport.getMedicalDevices()){
                      if(device.getEvaluationAvailability() != Availability.RETURNED){
                        if(device.getReturnedDate() != null){
                            errors.addValidationError("SME_BR8_ERR", "Returned date must only be specified when Evaluation availability is returned.").addFieldNames("aeReport.medicalDevices[" + i + "].returnedDate");
                        }
                      }

                      i++;
                   }
                   return errors.hasErrors() ? FAIL : SUCCESS;
                }

           }.validate(aeReport, errors)</eval>
        </lhs>
        <rhs>
            <!--  Error message is already populated -->
        </rhs>
    </rule>


    <!-- ==========================================================================
    RuleName : SME_BR9_CHK
    Rule : 'Returned Date' should be given if DEVICE is not 'Returned'.
    Error Code : SME_BR9_ERR
    Error Message : 'Returned Date' should be given if DEVICE is not 'Returned'.     .
    ============================================================================= -->
    <rule name="SME_BR9_CHK">
        <lhs>
            <pattern identifier="aeReport"
                object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
            <pattern identifier="errors"
                object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
            <eval>new ExpeditedAdverseEventValidator(){
                public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
                   int i = 0;
                   for(MedicalDevice device : aeReport.getMedicalDevices()){
                      if(device.getEvaluationAvailability() == Availability.RETURNED){
                        if(device.getReturnedDate() == null){
                            errors.addValidationError("SME_BR9_ERR", "Returned date must be specified when Evaluation availability is returned.").addFieldNames("aeReport.medicalDevices[" + i + "].returnedDate");
                        }
                      }

                      i++;
                   }
                   return errors.hasErrors() ? FAIL : SUCCESS;
                }

           }.validate(aeReport, errors)</eval>
        </lhs>
        <rhs>
            <!--  Error message is already populated -->
        </rhs>
    </rule>
    
    <!-- ==========================================================================
    RuleName : SME_BR10_CHK
    Rule : 'Returned Date' should be given if DEVICE is not 'Returned'.
    Error Code : SME_BR10_ERR
    Error Message : DEVICE_OPERATOR_DESCRIPTION must not be provided if DEVICE_OPERATOR is not 'Other'
    ============================================================================= -->
    <rule name="SME_BR10_CHK">
        <lhs>
            <pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
            <pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
            <eval>new ExpeditedAdverseEventValidator() {
                public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
                   int i = 0;
                   for(MedicalDevice device : aeReport.getMedicalDevices()) {
                        if (StringUtils.isNotBlank(device.getOtherDeviceOperator())) {
                            if (device.getDeviceOperator() != DeviceOperator.OTHER) {
                                errors.addValidationError("SME_BR10_ERR", "DEVICE_OPERATOR_DESCRIPTION must not be provided if DEVICE_OPERATOR is not 'Other'. ").addFieldNames("aeReport.medicalDevices[" + i + "].deviceOperator", "aeReport.medicalDevices[" + i + "].otherDeviceOperator");
                            }
                        }
                      i++;
                   }
                   return errors.hasErrors() ? FAIL : SUCCESS;
                }

           }.validate(aeReport, errors)</eval>
        </lhs>
        <rhs>
            <!--  Error message is already populated -->
        </rhs>
    </rule>

    <!-- ==========================================================================
    RuleName : SME_BR11_CHK
    Rule : 'Returned Date' should be given if DEVICE is not 'Returned'.
    Error Code : SME_BR11_ERR
    Error Message : Device Operator Description" must be provided if "Device Operator" is 'Other' 
    ============================================================================= -->
    <rule name="SME_BR11_CHK">
        <lhs>
            <pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
            <pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
            <eval>new ExpeditedAdverseEventValidator() {
                public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
                   int i = 0;
                   for(MedicalDevice device : aeReport.getMedicalDevices()) {
                        if (device.getDeviceOperator() == DeviceOperator.OTHER) {
                            if (StringUtils.isBlank(device.getOtherDeviceOperator())) {
                                errors.addValidationError("SME_BR11_ERR", "Device Operator Description" must be provided if "Device Operator" is 'Other'").addFieldNames("aeReport.medicalDevices[" + i + "].deviceOperator", "aeReport.medicalDevices[" + i + "].otherDeviceOperator");
                            }
                        }
                      i++;
                   }
                   return errors.hasErrors() ? FAIL : SUCCESS;
                }

           }.validate(aeReport, errors)</eval>
        </lhs>
        <rhs>
            <!--  Error message is already populated -->
        </rhs>
    </rule>

</package>	