<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright SemanticBits, Northwestern University and Akaza Research
  
  Distributed under the OSI-approved BSD 3-Clause License.
  See http://ncip.github.com/caaers/LICENSE.txt for details.
-->
<package  name="gov.nih.nci.cabig.caaers.rules.reporting_attribution_section"  xmlns="http://drools.org/drools-4.0" xmlns:drools="http://drools.org/drools-4.0" xmlns:rules="http://drools.org/drools-4.0" 
	xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:schemaLocation="http://drools.org/drools-4.0 drools-4.0.xsd">
	
	<import name="gov.nih.nci.cabig.caaers.domain.*"/>
	<import name="gov.nih.nci.cabig.caaers.validation.*" />
	<import name="java.util.HashSet" />
	<import name="com.semanticbits.rules.objectgraph.NullSafeFieldExtractor" />
	<import name="gov.nih.nci.cabig.ctms.domain.DomainObject" />
	<import name="gov.nih.nci.cabig.caaers.rules.runtime.ExpeditedAdverseEventValidator" />
	
	<global type="com.semanticbits.rules.impl.RuleContext" identifier="ruleContext"/>
	<global type="com.semanticbits.rules.runtime.action.ActionDispatcher" identifier="actionDispatcher"/>
	
	<!-- ==========================================================================
	RuleName : AER_BR7_CHK
	Logic : "At least one attribution with one of the following values should present for every AE entered on the report i.e. ‘Possible’, ‘Probable’ & ‘Definite’. AEs reported on the ‘DEATH’ Category are considered as an exception and are not required to meet this specification.
	Error Code : AER_BR7_ERR
	Error Message : At least one ATTRIBUTION with one of the following values should present for every AE (except AEs reported on "DEATH" category) provided i.e. ‘Possible’, ‘Probable’ & ‘Definite’
	============================================================================= -->
	<rule name="AER_BR7_CHK">
		<lhs>
			<pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
			<pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
			<eval>new ExpeditedAdverseEventValidator() {
				public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
				
				if(!aeReport.isAttributionRequired()) return SUCCESS;
				
				int i = 0;
				for(AdverseEvent ae : aeReport.getAdverseEvents()){
					if(!(ae.getAdverseEventTerm() instanceof AdverseEventCtcTerm)) continue;
                    if(ae.getGrade() == null) continue;
					if(ae.getGrade().equals(Grade.DEATH)) continue;
					if(!ae.isAttributedWith(new Attribution[]{Attribution.POSSIBLE, Attribution.PROBABLE, Attribution.DEFINITE})){
						errors.addValidationError("AER_BR7_ERR", "At least one attribution with one of the following values should present for every AE entered on the report i.e. 'Possible', 'Probable' and 'Definite'. AEs reported on the 'DEATH' category are considered as an exception and are not required to meet this specification",i);
					}
                    i++;
				}
				return errors.getErrorCount() > 0 ? FAIL : SUCCESS;
			}
		}.validate(aeReport, errors)</eval>
		</lhs>
		<rhs>
			<!-- Already Populated Error Message-->
       	</rhs>
	</rule>
	
	
	<!-- ==========================================================================
	RuleName : ATT_BR1_CHK
	Logic : ATTRIBUTION_FOR_AE  to all possible causes not provided
	Error Code : ATT_BR1_ERR
	Error Message : AE must be attributed to all CAUSAL factors on report
	============================================================================= -->
	<rule name="ATT_BR1_CHK">
		<lhs>
			<pattern identifier="aeReport" object-type="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport"/>
			<pattern identifier="errors" object-type="gov.nih.nci.cabig.caaers.validation.ValidationErrors"/>
			<eval>new ExpeditedAdverseEventValidator() {
				public boolean validate(ExpeditedAdverseEventReport aeReport,ValidationErrors errors) {
		
				int i = 0;
				for(AdverseEvent ae : aeReport.getAdverseEvents()){
					i++;
					int conMedLen = NullSafeFieldExtractor.extractFieldLength(aeReport,"concomitantMedications");
					if( conMedLen &gt; 0){
						if(conMedLen != NullSafeFieldExtractor.extractFieldLength(ae,"concomitantMedicationAttributions")){
						 	errors.addValidationError("ATT_BR1_ERR","AE must be attributed to all CAUSAL factors on report, conmed",i,ae.getAdverseEventTerm().getUniversalTerm());
						 	break;
						}
						if(!ae.isAllConMedAttributionProvided()){
						 	errors.addValidationError("ATT_BR1_ERR","AE must be attributed to all CAUSAL factors on report, conmed",i,ae.getAdverseEventTerm().getUniversalTerm());
						 	break;
						}
						
					}
					
					int caLen = NullSafeFieldExtractor.extractFieldLength(aeReport,"treatmentInformation.courseAgents");
					if( caLen &gt; 0){
						if(caLen != NullSafeFieldExtractor.extractFieldLength(ae,"courseAgentAttributions")){
						 	errors.addValidationError("ATT_BR1_ERR","AE must be attributed to all CAUSAL factors on report,courseAgents",i,ae.getAdverseEventTerm().getUniversalTerm());
						 	break;
						}
						if(!ae.isAllCourseAgentAttributionProvided()){
						 	errors.addValidationError("ATT_BR1_ERR","AE must be attributed to all CAUSAL factors on report,courseAgents",i,ae.getAdverseEventTerm().getUniversalTerm());
						 	break;
						}
						
					}
					
					int mdLen = NullSafeFieldExtractor.extractFieldLength(aeReport,"medicalDevices");
					if( mdLen &gt; 0){
						if(mdLen != NullSafeFieldExtractor.extractFieldLength(ae,"deviceAttributions")){
						 	errors.addValidationError("ATT_BR1_ERR","AE must be attributed to all CAUSAL factors on report,medicalDevices",i,ae.getAdverseEventTerm().getUniversalTerm());
						 	break;
						}
						if(!ae.isAllDeviceAttributionProvided()){
						 	errors.addValidationError("ATT_BR1_ERR","AE must be attributed to all CAUSAL factors on report,medicalDevices",i,ae.getAdverseEventTerm().getUniversalTerm());
						 	break;
						}
						
					}
					
					int rdLen = NullSafeFieldExtractor.extractFieldLength(aeReport,"radiationInterventions");
					if( rdLen &gt; 0){
						if(rdLen != NullSafeFieldExtractor.extractFieldLength(ae,"radiationAttributions")){
						 	errors.addValidationError("ATT_BR1_ERR","AE must be attributed to all CAUSAL factors on report(radiation)",i,ae.getAdverseEventTerm().getUniversalTerm());
						 	break;
						}
						if(!ae.isAllRadiationAttributionProvided()){
						 	errors.addValidationError("ATT_BR1_ERR","AE must be attributed to all CAUSAL factors on report (radiation)",i,ae.getAdverseEventTerm().getUniversalTerm());
						 	break;
						}
						
					}
					
					
					int suLen = NullSafeFieldExtractor.extractFieldLength(aeReport,"surgeryInterventions");
					if( suLen &gt; 0){
						if(suLen != NullSafeFieldExtractor.extractFieldLength(ae,"surgeryAttributions")){
						 	errors.addValidationError("ATT_BR1_ERR","AE must be attributed to all CAUSAL factors on report(surgery)",i,ae.getAdverseEventTerm().getUniversalTerm());
						 	break;
						}
						if(!ae.isAllSurgeryAttributionProvided()){
						 	errors.addValidationError("ATT_BR1_ERR","AE must be attributed to all CAUSAL factors on report (surgery)",i,ae.getAdverseEventTerm().getUniversalTerm());
						 	break;
						}
						
					}
					
					if(aeReport.getDiseaseHistory().getAbstractStudyDisease() != null){
						if(1 != NullSafeFieldExtractor.extractFieldLength(ae,"diseaseAttributions")){
							errors.addValidationError("ATT_BR1_ERR","AE must be attributed to all CAUSAL factors on report (disease)",i,ae.getAdverseEventTerm().getUniversalTerm());
						 	break;
						}
						
						if(!ae.isAllDiseaseAttributionProvided()){
							errors.addValidationError("ATT_BR1_ERR","AE must be attributed to all CAUSAL factors on report (disease)",i,ae.getAdverseEventTerm().getUniversalTerm());
						 	break;
						}
						
					}
					
					int ocLen = NullSafeFieldExtractor.extractFieldLength(aeReport,"otherCauses");
					if( ocLen &gt; 0){
						if(ocLen != NullSafeFieldExtractor.extractFieldLength(ae,"otherCauseAttributions")){
						 	errors.addValidationError("ATT_BR1_ERR","AE must be attributed to all CAUSAL factors on report(other)",i,ae.getAdverseEventTerm().getUniversalTerm());
						 	break;
						}
						if(!ae.isAllOtherCauseAttributionProvided()){
						 	errors.addValidationError("ATT_BR1_ERR","AE must be attributed to all CAUSAL factors on report (other)",i,ae.getAdverseEventTerm().getUniversalTerm());
						 	break;
						}
						
					}
					
					
    				  
				}
				return errors.getErrorCount() > 0 ? FAIL : SUCCESS;
			}
		}.validate(aeReport, errors)</eval>
		</lhs>
		<rhs>
			<!-- Already Populated Error Message-->
       	</rhs>
	</rule>		
</package>
