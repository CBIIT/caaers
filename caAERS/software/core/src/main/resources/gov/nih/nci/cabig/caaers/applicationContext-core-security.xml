<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
						http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
						http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd">

    <aop:aspectj-autoproxy/>
    <aop:spring-configured/>

    <bean id="authorizationSwitch" class="gov.nih.nci.cabig.ctms.acegi.csm.authorization.AuthorizationSwitch"
          factory-method="getInstance">
        <property name="on" value="true"/>
    </bean>

    <bean id="csmApplicationContextName" class="java.lang.String">
        <constructor-arg value="CTMS_SUITE"/>
    </bean>

    <util:map id="connectionProperties" map-class="java.util.HashMap" key-type="java.lang.String"
              value-type="java.lang.String">
        <entry key="hibernate.connection.url" value="s[csm.datasource.url]"></entry>
        <entry key="hibernate.connection.driver_class" value="s[datasource.driver]"></entry>
        <entry key="hibernate.dialect" value="s[csm.datasource.dialect]"></entry>
        <entry key="hibernate.connection.username" value="s[csm.datasource.username]"></entry>
        <entry key="hibernate.connection.password" value="s[csm.datasource.password]"></entry>
        <entry key="hibernate.connection.release_mode" value="after_transaction"></entry>
        <entry key="hibernate.c3p0.min_size" value="2"></entry>
        <entry key="hibernate.c3p0.max_size" value="5"></entry>
        <entry key="hibernate.c3p0.timeout" value="300"></entry>
        <entry key="hibernate.c3p0.max_statements" value="50"></entry>
        <entry key="hibernate.c3p0.idle_test_period" value="3000"></entry>
    </util:map>


    <bean id="csmSessionFactory " class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource" ref="csmDataSource"/>
        <property name="mappingResources">
            <list>
                <value>gov/nih/nci/security/authorization/domainobjects/InstanceLevelMappingElement.hbm.xml</value>
                <value>gov/nih/nci/security/authorization/domainobjects/Privilege.hbm.xml</value>
                <value>gov/nih/nci/security/authorization/domainobjects/Application.hbm.xml</value>
                <value>gov/nih/nci/security/authorization/domainobjects/FilterClause.hbm.xml</value>
                <value>gov/nih/nci/security/authorization/domainobjects/Role.hbm.xml</value>
                <value>gov/nih/nci/security/dao/hibernate/RolePrivilege.hbm.xml</value>
                <value>gov/nih/nci/security/dao/hibernate/UserGroup.hbm.xml</value>
                <value>gov/nih/nci/security/dao/hibernate/ProtectionGroupProtectionElement.hbm.xml</value>
                <value>gov/nih/nci/security/authorization/domainobjects/Group.hbm.xml</value>
                <value>gov/nih/nci/security/authorization/domainobjects/User.hbm.xml</value>
                <value>gov/nih/nci/security/authorization/domainobjects/ProtectionGroup.hbm.xml</value>
                <value>gov/nih/nci/security/authorization/domainobjects/ProtectionElement.hbm.xml</value>
                <value>gov/nih/nci/security/authorization/domainobjects/UserGroupRoleProtectionGroup.hbm.xml</value>
                <value>gov/nih/nci/security/authorization/domainobjects/UserProtectionElement.hbm.xml</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <bean class="gov.nih.nci.cabig.ctms.tools.spring.HibernatePropertiesFactoryBean">
                <property name="properties">
                    <props>
                        <prop key="hibernate.connection.release_mode">auto</prop>
                        <prop key="hibernate.dialect">s[csm.datasource.dialect]</prop>
                    </props>                    
                </property>
            </bean>
        </property>
    </bean>

    <bean id="fasterAuthorizationDao" class="gov.nih.nci.cabig.ctms.suite.authorization.csmext.FasterAuthorizationDao">
        <constructor-arg index="0" ref="csmSessionFactory"/>
        <constructor-arg index="1" ref="csmApplicationContextName"/>
    </bean>

    <bean id="csmUserProvisioningManager" class="gov.nih.nci.security.provisioning.AuthorizationManagerImpl">
        <constructor-arg index="0" ref="csmApplicationContextName"/>
        <constructor-arg index="1" ref="connectionProperties"/>
        <property name="authorizationDAO" ref="fasterAuthorizationDao"/>
    </bean>


    <aop:config>
        <!-- pointcuts -->
        <aop:pointcut id="daoSaveOrUpdatePointcut"
                      expression="execution(public void gov.nih.nci.cabig.caaers.dao.CaaersDao+.save(gov.nih.nci.cabig.ctms.domain.AbstractMutableDomainObject+))
        || execution(public void gov.nih.nci.cabig.caaers.dao.CaaersDao+.merge(gov.nih.nci.cabig.ctms.domain.AbstractMutableDomainObject+))
        || execution(public * gov.nih.nci.cabig.caaers.dao.StudyDao+.search*(..))
        ||execution(public * gov.nih.nci.cabig.caaers.dao.StudyDao+.get*(..))
        ||execution(public * gov.nih.nci.cabig.caaers.domain.repository.ajax.StudySearchableAjaxableDomainObjectRepository+.find*(..))
        ||execution(public * gov.nih.nci.cabig.caaers.dao.StudyDao+.match*(..))
        ||execution(public * gov.nih.nci.cabig.caaers.domain.repository.ajax.ParticipantAjaxableDomainObjectRepository+.find*(..))
        ||execution(public * gov.nih.nci.cabig.caaers.dao.ExpeditedAdverseEventReportDao+.search*(..))
        ||execution(public * gov.nih.nci.cabig.caaers.domain.repository.OrganizationRepositoryImpl+.getOrganizationsHavingStudySites*(..))
        ||execution(public * gov.nih.nci.cabig.caaers.domain.repository.OrganizationRepositoryImpl+.getApplicableOrganizationsFromStudySites*(java.lang.String,java.lang.Integer))
        ||execution(public * gov.nih.nci.cabig.caaers.domain.repository.OrganizationRepositoryImpl+.searchOrganization(..))
        ||execution(public * gov.nih.nci.cabig.caaers.domain.repository.StudyRepository+.find(..))
        ||execution(public * gov.nih.nci.cabig.caaers.domain.repository.ResearchStaffRepository+.getResearchStaff(..))
        ||execution(public * gov.nih.nci.cabig.caaers.api.impl.AdverseEventManagementServiceImpl+.create*(..))
        ||execution(public * gov.nih.nci.cabig.caaers.api.impl.AdverseEventManagementServiceImpl+.delete*(..))  
        ||execution(public * gov.nih.nci.cabig.caaers.api.impl.DefaultResearchStaffMigratorService+.saveResearchStaff(..))   
        ||execution(public * gov.nih.nci.cabig.caaers.api.impl.DefaultInvestigatorMigratorService+.saveInvestigator(..))   
                              "/>

        <!-- advisors -->


        <!-- aspects -->

        <!--
          <aop:aspect id="daoSecurityInterceptorAspect" ref="daoSecurityInterceptorAspectBean">
              <aop:around pointcut-ref="daoSaveOrUpdatePointcut" method="advise"/>
          </aop:aspect>
        -->
        <!--
        <aop:aspect ref="refreshIndexAspect">
            <aop:pointcut id="executionOfIndexRefreshAfterUpdate"
                    expression="execution(* gov.nih.nci.cabig.caaers.domain.repository.StudyRepository.save(..))
                             || execution(* gov.nih.nci.cabig.caaers.domain.repository.StudyRepository.merge(..))
                             || execution(* gov.nih.nci.cabig.caaers.dao.ParticipantDao.save(..))
                             "/>
            <aop:after pointcut-ref="executionOfIndexRefreshAfterUpdate" method="updateIndexByUserName"/>
        </aop:aspect>
        -->

    </aop:config>


    <bean id="daoSecurityInterceptorAspectBean" class="gov.nih.nci.cabig.ctms.acegi.csm.aop.SecurityInterceptorAspect">
        <property name="securityInterceptor" ref="daoSecurity"/>
    </bean>


    <bean id="daoSecurityTemplate" abstract="true">
        <property name="authenticationManager" ref="authenticationManager"/>
    </bean>

    <util:map id="joinPointObjectPrivilegeMap" map-class="java.util.LinkedHashMap">
        <!-- CAAERS-3565 -->
        <entry key="execution(* save(gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport))"
               value="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport:UPDATE"/>

        <entry key="execution(* save(gov.nih.nci.cabig.caaers.domain.Study))"
               value="gov.nih.nci.cabig.caaers.domain.Study:CREATE"/>

        <entry key="execution(* merge(gov.nih.nci.cabig.caaers.domain.Study))"
               value="gov.nih.nci.cabig.caaers.domain.Study:UPDATE"/>

        <entry key="execution(* save(gov.nih.nci.cabig.caaers.domain.Participant))"
               value="gov.nih.nci.cabig.caaers.domain.Participant:CREATE"/>

        <entry key="execution(* gov.nih.nci.cabig.caaers.dao.StudyDao.updateStudyForServiceUseOnly(gov.nih.nci.cabig.caaers.domain.Study))"
               value="gov.nih.nci.cabig.caaers.domain.Participant:CREATE"/>

        <entry key="execution(* gov.nih.nci.cabig.caaers.dao.StudyDao.search*(..))"
               value="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport:ACCESS"/>

        <entry key="execution(* gov.nih.nci.cabig.caaers.dao.StudyDao.get*(..))"
               value="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport:ACCESS"/>

        <entry key="execution(* gov.nih.nci.cabig.caaers.domain.repository.ajax.StudySearchableAjaxableDomainObjectRepository.find*(..))"
               value="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport:ACCESS"/>

        <entry key="execution(* gov.nih.nci.cabig.caaers.domain.repository.ajax.ParticipantAjaxableDomainObjectRepository.find*(..))"
               value="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport:ACCESS"/>

        <entry key="execution(* gov.nih.nci.cabig.caaers.dao.ExpeditedAdverseEventReportDao.search*(..))"
               value="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport:ACCESS"/>

        <entry key="execution(* gov.nih.nci.cabig.caaers.domain.repository.OrganizationRepositoryImpl+.getOrganizationsHavingStudySites*(..))"
               value="gov.nih.nci.cabig.caaers.domain.Participant:READ"/>

        <entry key="execution(* gov.nih.nci.cabig.caaers.domain.repository.OrganizationRepositoryImpl+.getApplicableOrganizationsFromStudySites*(java.lang.String,java.lang.Integer))"
               value="gov.nih.nci.cabig.caaers.domain.Organization:ACCESS"/>

        <entry key="execution(* gov.nih.nci.cabig.caaers.domain.repository.OrganizationRepositoryImpl+.searchOrganization(..))"
               value="gov.nih.nci.cabig.caaers.domain.Participant:READ"/>
        <!--                                    
        <entry key="execution(* gov.nih.nci.cabig.caaers.dao.ParticipantDao.search*(..))"
               value="gov.nih.nci.cabig.caaers.domain.Participant:READ"/>  -->

        <entry key="execution(* gov.nih.nci.cabig.caaers.domain.StudyParticipantAssignment.setParticipant(gov.nih.nci.cabig.caaers.domain.Participant))"
               value="gov.nih.nci.cabig.caaers.Task:ACCESS"/>

        <entry key="execution(* gov.nih.nci.cabig.caaers.domain.repository.StudyRepository.find(..))"
               value="gov.nih.nci.cabig.caaers.domain.Participant:READ"/>

        <entry key="execution(* gov.nih.nci.cabig.caaers.domain.repository.ResearchStaffRepository+.getResearchStaff(..))"
               value="gov.nih.nci.cabig.caaers.Admin:ACCESS"/>

        <entry key="execution(* gov.nih.nci.cabig.caaers.api.impl.AdverseEventManagementServiceImpl+.create*(..))"
               value="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport:CREATE"/>

        <entry key="execution(* gov.nih.nci.cabig.caaers.api.impl.AdverseEventManagementServiceImpl+.delete*(..))"
               value="gov.nih.nci.cabig.caaers.domain.ExpeditedAdverseEventReport:CREATE"/>

        <entry key="execution(* gov.nih.nci.cabig.caaers.api.impl.DefaultResearchStaffMigratorService+.saveResearchStaff(..))"
               value="gov.nih.nci.cabig.caaers.Admin:ACCESS"/>

        <entry key="execution(* gov.nih.nci.cabig.caaers.api.impl.DefaultInvestigatorMigratorService+.saveInvestigator(..))"
               value="gov.nih.nci.cabig.caaers.Admin:ACCESS"/>

    </util:map>

    <bean id="joinPointPrivilegeAndObjectIdGenerator" class="gov.nih.nci.cabig.ctms.acegi.csm.authorization.JoinPointPrivilegeAndObjectIdGenerator">
        <property name="objectPrivilegeMap"
                  ref="joinPointObjectPrivilegeMap"/>
    </bean>

    <bean id="daoAuthorizationCheck" autowire="byType" class="gov.nih.nci.cabig.ctms.acegi.csm.authorization.DelegatingObjectPrivilegeCSMAuthorizationCheck">
        <property name="csmAuthorizationCheck">
            <bean class="gov.nih.nci.cabig.ctms.acegi.grid.authorization.CSMGridGroupAuthorizationCheck">
                <property name="csmUserProvisioningManager" ref="csmUserProvisioningManager"/>
                <property name="authorizationSwitch" ref="authorizationSwitch"/>
            </bean>
        </property>
        <property name="objectIdGenerator" ref="joinPointPrivilegeAndObjectIdGenerator"/>
        <property name="privilegeGenerator" ref="joinPointPrivilegeAndObjectIdGenerator"/>
    </bean>

    <bean id="daoSecurity" parent="daoSecurityTemplate" class="org.acegisecurity.intercept.method.aspectj.AspectJSecurityInterceptor">
        <property name="objectDefinitionSource">
            <value>
                gov.nih.nci.cabig.caaers.dao.ExpeditedAdverseEventReportDao.*=CSM_AUTHN_CHECK
                gov.nih.nci.cabig.caaers.dao.StudyDao.*=CSM_AUTHN_CHECK
                gov.nih.nci.cabig.caaers.domain.StudyParticipantAssignment.*=CSM_AUTHN_CHECK
                gov.nih.nci.cabig.caaers.domain.repository.ajax.StudySearchableAjaxableDomainObjectRepository.*=CSM_AUTHN_CHECK
                gov.nih.nci.cabig.caaers.domain.repository.ajax.ParticipantAjaxableDomainObjectRepository.*=CSM_AUTHN_CHECK
                gov.nih.nci.cabig.caaers.domain.repository.OrganizationRepositoryImpl.getOrganizationsHavingStudySites=CSM_AUTHN_CHECK
                gov.nih.nci.cabig.caaers.domain.repository.OrganizationRepositoryImpl.getApplicableOrganizationsFromStudySites=CSM_AUTHN_CHECK
                gov.nih.nci.cabig.caaers.domain.repository.OrganizationRepositoryImpl.searchOrganization=CSM_AUTHN_CHECK
                gov.nih.nci.cabig.caaers.domain.repository.StudyRepository.*=CSM_AUTHN_CHECK
                gov.nih.nci.cabig.caaers.api.impl.AdverseEventManagementServiceImpl.create*=CSM_AUTHN_CHECK
                gov.nih.nci.cabig.caaers.api.impl.AdverseEventManagementServiceImpl.delete*=CSM_AUTHN_CHECK
                gov.nih.nci.cabig.caaers.api.impl.DefaultResearchStaffMigratorService.saveResearchStaff=CSM_AUTHN_CHECK
                gov.nih.nci.cabig.caaers.api.impl.DefaultInvestigatorMigratorService.saveInvestigator=CSM_AUTHN_CHECK
            </value>
        </property>
        <property name="accessDecisionManager">
            <bean class="org.acegisecurity.vote.AffirmativeBased">
                <property name="allowIfAllAbstainDecisions">
                    <value>false</value>
                </property>
                <property name="decisionVoters">
                    <list>
                        <bean class="gov.nih.nci.cabig.caaers.security.SystemUserVoter">
                            <property name="username" value="SYSTEM"/>
                            <property name="password" value="ignoreme"/>
                        </bean>
                        <bean class="gov.nih.nci.cabig.ctms.acegi.csm.vote.AuthorizationSwitchVoter">
                            <property name="authorizationSwitch" ref="authorizationSwitch"/>
                            <property name="requiresAuthentication" value="false"/>
                        </bean>
                        <bean class="gov.nih.nci.cabig.ctms.acegi.csm.vote.CSMAuthorizationCheckVoter">
                            <property name="processConfigAttribute" value="CSM_AUTHN_CHECK"/>
                            <property name="authorizationCheck" ref="daoAuthorizationCheck"/>
                        </bean>
                    </list>
                </property>
            </bean>
        </property>
        <!--<property name="afterInvocationManager">
            <ref bean="afterInvocationManager"/>
        </property>-->
    </bean>
    <!--<bean id="afterInvocationManager" class="org.acegisecurity.afterinvocation.AfterInvocationProviderManager">
        <property name="providers">
            <list>
            	&lt;!&ndash; we are restricting all the results in search , why do we need to check once again for a given instance , will clarify with SAURAV when he gets back -  Srini
                <ref local="siteSecurityBasicAuthCheck"/>
                &ndash;&gt;
                &lt;!&ndash; <ref local="siteSecurityCollectionFilter"/>  &ndash;&gt;
            </list>
        </property>
    </bean>-->


    <bean id="studyParticipantAssignmentAspect"
          class="gov.nih.nci.cabig.caaers.security.StudyParticipantAssignmentAspect" factory-method="aspectOf">
        <property name="securityInterceptor" ref="daoSecurity"/>

    </bean>


    <bean id="csmGroupAuthorizationCheck"
          class="gov.nih.nci.cabig.ctms.acegi.csm.authorization.CSMGroupAuthorizationCheck">
        <property name="csmUserProvisioningManager" ref="csmUserProvisioningManager"/>
        <property name="authorizationSwitch" ref="authorizationSwitch"/>
    </bean>

    <!-- Run as authentication Populator -->
    <bean id="runAsAuthenticationPopulator" class="gov.nih.nci.cabig.caaers.security.RunAsAuthenticationPopulator">
        <property name="username" value="SYSTEM"/>
        <property name="password" value="ignoreme"/>
        <property name="authorities">
            <list>
                <value>caaers_super_user</value>
            </list>
        </property>
    </bean>

    <bean id="runAsAutenticationProviderInterceptor"
          class="gov.nih.nci.cabig.caaers.security.RunAsAuthenticationPopulatorIncerceptor">
        <property name="runAsAuthenticationPopulator" ref="runAsAuthenticationPopulator"/>
    </bean>

    <bean id="gridAutenticationInterceptor" class="gov.nih.nci.cabig.caaers.security.GridAuthenticationInterceptor">
        <property name="csmUserDetailsService" ref="csmUserDetailsService"/>
    </bean>

    <!-- ==== Authentication Related Stuff ================ -->

    <bean id="csmLockoutManager" class="gov.nih.nci.cabig.caaers.security.CaaersCSMLockoutManagerFactoryBean"/>

    <bean id="csmAuthenticationManager" class="gov.nih.nci.security.SecurityServiceProvider"
          factory-method="getAuthenticationManager" depends-on="csmLockoutManager">
        <constructor-arg ref="csmApplicationContextName"/>
    </bean>

    <bean id="localAuthenticationProvider" class="gov.nih.nci.cabig.caaers.security.CaaersCSMAuthenticationProvider"
          lazy-init="true">
        <property name="csmAuthenticationManager" ref="csmAuthenticationManager"/>
        <property name="userDetailsService" ref="csmUserDetailsService"/>
        <property name="passwordPolicyService" ref="passwordPolicyService"/>
        <property name="userRepository" ref="userRepository"/>
        <property name="userCache" ref="userCache"/>
    </bean>

    <bean id="csmUserDetailsService" class="gov.nih.nci.cabig.caaers.security.CaaersCSMUserDetailsService"
          lazy-init="true">
        <property name="csmUserProvisioningManager" ref="csmUserProvisioningManager"/>
    </bean>


    <bean id="userCache" class="org.acegisecurity.providers.dao.cache.EhCacheBasedUserCache">
        <property name="cache">
            <bean class="org.springframework.cache.ehcache.EhCacheFactoryBean">
                <property name="cacheManager" ref="cacheManager"/>
                <property name="cacheName" value="userCache"/>
            </bean>
        </property>
    </bean>
    <!-- Cached Manager -->
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" lazy-init="true"/>

    <!-- Common API for provisioning into csm -->
    <bean id="provisioningSessionFactory" class="gov.nih.nci.cabig.ctms.suite.authorization.ProvisioningSessionFactory">
        <property name="authorizationManager" ref="csmUserProvisioningManager"/>
    </bean>

    <!-- The security facade bean -->
    <bean id="caaersSecurityFacade" class="gov.nih.nci.cabig.caaers.security.CaaersSecurityFacadeImpl">
        <property name="userRepository" ref="userRepository"/>
        <property name="userProvisioningManager" ref="csmUserProvisioningManager"/>
        <property name="rolePrivilegeDao" ref="rolePrivilegeDao"/>
        <property name="provisioningSessionFactory" ref="provisioningSessionFactory"/>
    </bean>

    <bean id="gridServicesAuthorizationHelper" class="gov.nih.nci.cabig.caaers.security.GridServicesAuthorizationHelper">
        <property name="userRepository" ref="userRepository"/>
        <property name="userProvisioningManager" ref="csmUserProvisioningManager"/>
        <property name="provisioningSessionFactory" ref="provisioningSessionFactory"/>
    </bean>

</beans>